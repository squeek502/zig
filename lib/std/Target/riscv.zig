//! This file is auto-generated by tools/update_cpu_features.zig.

const std = @import("../std.zig");
const CpuFeature = std.Target.Cpu.Feature;
const CpuModel = std.Target.Cpu.Model;

pub const Feature = enum {
    @"32bit",
    @"64bit",
    a,
    auipc_addi_fusion,
    c,
    conditional_cmv_fusion,
    d,
    dlen_factor_2,
    e,
    experimental,
    experimental_zacas,
    experimental_zcmop,
    experimental_zfbfmin,
    experimental_zicfilp,
    experimental_zicfiss,
    experimental_zimop,
    experimental_ztso,
    experimental_zvfbfmin,
    experimental_zvfbfwma,
    f,
    fast_unaligned_access,
    forced_atomics,
    h,
    i,
    ld_add_fusion,
    lui_addi_fusion,
    m,
    no_default_unroll,
    no_optimized_zero_stride_load,
    no_rvc_hints,
    relax,
    reserve_x1,
    reserve_x10,
    reserve_x11,
    reserve_x12,
    reserve_x13,
    reserve_x14,
    reserve_x15,
    reserve_x16,
    reserve_x17,
    reserve_x18,
    reserve_x19,
    reserve_x2,
    reserve_x20,
    reserve_x21,
    reserve_x22,
    reserve_x23,
    reserve_x24,
    reserve_x25,
    reserve_x26,
    reserve_x27,
    reserve_x28,
    reserve_x29,
    reserve_x3,
    reserve_x30,
    reserve_x31,
    reserve_x4,
    reserve_x5,
    reserve_x6,
    reserve_x7,
    reserve_x8,
    reserve_x9,
    save_restore,
    seq_cst_trailing_fence,
    shifted_zextw_fusion,
    short_forward_branch_opt,
    smaia,
    smepmp,
    ssaia,
    svinval,
    svnapot,
    svpbmt,
    tagged_globals,
    unaligned_scalar_mem,
    use_postra_scheduler,
    v,
    ventana_veyron,
    xcvalu,
    xcvbi,
    xcvbitmanip,
    xcvelw,
    xcvmac,
    xcvmem,
    xcvsimd,
    xsfvcp,
    xsfvfnrclipxfqf,
    xsfvfwmaccqqq,
    xsfvqmaccdod,
    xsfvqmaccqoq,
    xtheadba,
    xtheadbb,
    xtheadbs,
    xtheadcmo,
    xtheadcondmov,
    xtheadfmemidx,
    xtheadmac,
    xtheadmemidx,
    xtheadmempair,
    xtheadsync,
    xtheadvdot,
    xventanacondops,
    za128rs,
    za64rs,
    zawrs,
    zba,
    zbb,
    zbc,
    zbkb,
    zbkc,
    zbkx,
    zbs,
    zca,
    zcb,
    zcd,
    zce,
    zcf,
    zcmp,
    zcmt,
    zdinx,
    zexth_fusion,
    zextw_fusion,
    zfa,
    zfh,
    zfhmin,
    zfinx,
    zhinx,
    zhinxmin,
    zic64b,
    zicbom,
    zicbop,
    zicboz,
    ziccamoa,
    ziccif,
    zicclsm,
    ziccrse,
    zicntr,
    zicond,
    zicsr,
    zifencei,
    zihintntl,
    zihintpause,
    zihpm,
    zk,
    zkn,
    zknd,
    zkne,
    zknh,
    zkr,
    zks,
    zksed,
    zksh,
    zkt,
    zmmul,
    zvbb,
    zvbc,
    zve32f,
    zve32x,
    zve64d,
    zve64f,
    zve64x,
    zvfh,
    zvfhmin,
    zvkb,
    zvkg,
    zvkn,
    zvknc,
    zvkned,
    zvkng,
    zvknha,
    zvknhb,
    zvks,
    zvksc,
    zvksed,
    zvksg,
    zvksh,
    zvkt,
    zvl1024b,
    zvl128b,
    zvl16384b,
    zvl2048b,
    zvl256b,
    zvl32768b,
    zvl32b,
    zvl4096b,
    zvl512b,
    zvl64b,
    zvl65536b,
    zvl8192b,
};

pub const featureSet = CpuFeature.feature_set_fns(Feature).featureSet;
pub const featureSetHas = CpuFeature.feature_set_fns(Feature).featureSetHas;
pub const featureSetHasAny = CpuFeature.feature_set_fns(Feature).featureSetHasAny;
pub const featureSetHasAll = CpuFeature.feature_set_fns(Feature).featureSetHasAll;

pub const all_features = blk: {
    const len = @typeInfo(Feature).Enum.fields.len;
    std.debug.assert(len <= CpuFeature.Set.needed_bit_count);
    var result: [len]CpuFeature = undefined;
    result[@intFromEnum(Feature.@"32bit")] = .{
        .llvm_name = "32bit",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.@"64bit")] = .{
        .llvm_name = "64bit",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.a)] = .{
        .llvm_name = "a",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.auipc_addi_fusion)] = .{
        .llvm_name = "auipc-addi-fusion",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.c)] = .{
        .llvm_name = "c",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.conditional_cmv_fusion)] = .{
        .llvm_name = "conditional-cmv-fusion",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.d)] = .{
        .llvm_name = "d",
        .dependencies = featureSet(&[_]Feature{
            .f,
        }),
    };
    result[@intFromEnum(Feature.dlen_factor_2)] = .{
        .llvm_name = "dlen-factor-2",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.e)] = .{
        .llvm_name = "e",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.experimental)] = .{
        .llvm_name = "experimental",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.experimental_zacas)] = .{
        .llvm_name = "experimental-zacas",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.experimental_zcmop)] = .{
        .llvm_name = "experimental-zcmop",
        .dependencies = featureSet(&[_]Feature{
            .zca,
        }),
    };
    result[@intFromEnum(Feature.experimental_zfbfmin)] = .{
        .llvm_name = "experimental-zfbfmin",
        .dependencies = featureSet(&[_]Feature{
            .f,
        }),
    };
    result[@intFromEnum(Feature.experimental_zicfilp)] = .{
        .llvm_name = "experimental-zicfilp",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.experimental_zicfiss)] = .{
        .llvm_name = "experimental-zicfiss",
        .dependencies = featureSet(&[_]Feature{
            .experimental_zimop,
            .zicsr,
        }),
    };
    result[@intFromEnum(Feature.experimental_zimop)] = .{
        .llvm_name = "experimental-zimop",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.experimental_ztso)] = .{
        .llvm_name = "experimental-ztso",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.experimental_zvfbfmin)] = .{
        .llvm_name = "experimental-zvfbfmin",
        .dependencies = featureSet(&[_]Feature{
            .zve32f,
        }),
    };
    result[@intFromEnum(Feature.experimental_zvfbfwma)] = .{
        .llvm_name = "experimental-zvfbfwma",
        .dependencies = featureSet(&[_]Feature{
            .experimental_zfbfmin,
            .experimental_zvfbfmin,
        }),
    };
    result[@intFromEnum(Feature.f)] = .{
        .llvm_name = "f",
        .dependencies = featureSet(&[_]Feature{
            .zicsr,
        }),
    };
    result[@intFromEnum(Feature.fast_unaligned_access)] = .{
        .llvm_name = "fast-unaligned-access",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.forced_atomics)] = .{
        .llvm_name = "forced-atomics",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.h)] = .{
        .llvm_name = "h",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.i)] = .{
        .llvm_name = "i",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.ld_add_fusion)] = .{
        .llvm_name = "ld-add-fusion",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.lui_addi_fusion)] = .{
        .llvm_name = "lui-addi-fusion",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.m)] = .{
        .llvm_name = "m",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.no_default_unroll)] = .{
        .llvm_name = "no-default-unroll",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.no_optimized_zero_stride_load)] = .{
        .llvm_name = "no-optimized-zero-stride-load",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.no_rvc_hints)] = .{
        .llvm_name = "no-rvc-hints",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.relax)] = .{
        .llvm_name = "relax",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x1)] = .{
        .llvm_name = "reserve-x1",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x10)] = .{
        .llvm_name = "reserve-x10",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x11)] = .{
        .llvm_name = "reserve-x11",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x12)] = .{
        .llvm_name = "reserve-x12",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x13)] = .{
        .llvm_name = "reserve-x13",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x14)] = .{
        .llvm_name = "reserve-x14",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x15)] = .{
        .llvm_name = "reserve-x15",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x16)] = .{
        .llvm_name = "reserve-x16",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x17)] = .{
        .llvm_name = "reserve-x17",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x18)] = .{
        .llvm_name = "reserve-x18",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x19)] = .{
        .llvm_name = "reserve-x19",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x2)] = .{
        .llvm_name = "reserve-x2",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x20)] = .{
        .llvm_name = "reserve-x20",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x21)] = .{
        .llvm_name = "reserve-x21",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x22)] = .{
        .llvm_name = "reserve-x22",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x23)] = .{
        .llvm_name = "reserve-x23",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x24)] = .{
        .llvm_name = "reserve-x24",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x25)] = .{
        .llvm_name = "reserve-x25",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x26)] = .{
        .llvm_name = "reserve-x26",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x27)] = .{
        .llvm_name = "reserve-x27",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x28)] = .{
        .llvm_name = "reserve-x28",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x29)] = .{
        .llvm_name = "reserve-x29",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x3)] = .{
        .llvm_name = "reserve-x3",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x30)] = .{
        .llvm_name = "reserve-x30",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x31)] = .{
        .llvm_name = "reserve-x31",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x4)] = .{
        .llvm_name = "reserve-x4",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x5)] = .{
        .llvm_name = "reserve-x5",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x6)] = .{
        .llvm_name = "reserve-x6",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x7)] = .{
        .llvm_name = "reserve-x7",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x8)] = .{
        .llvm_name = "reserve-x8",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.reserve_x9)] = .{
        .llvm_name = "reserve-x9",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.save_restore)] = .{
        .llvm_name = "save-restore",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.seq_cst_trailing_fence)] = .{
        .llvm_name = "seq-cst-trailing-fence",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.shifted_zextw_fusion)] = .{
        .llvm_name = "shifted-zextw-fusion",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.short_forward_branch_opt)] = .{
        .llvm_name = "short-forward-branch-opt",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.smaia)] = .{
        .llvm_name = "smaia",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.smepmp)] = .{
        .llvm_name = "smepmp",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.ssaia)] = .{
        .llvm_name = "ssaia",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.svinval)] = .{
        .llvm_name = "svinval",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.svnapot)] = .{
        .llvm_name = "svnapot",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.svpbmt)] = .{
        .llvm_name = "svpbmt",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.tagged_globals)] = .{
        .llvm_name = "tagged-globals",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.unaligned_scalar_mem)] = .{
        .llvm_name = "unaligned-scalar-mem",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.use_postra_scheduler)] = .{
        .llvm_name = "use-postra-scheduler",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.v)] = .{
        .llvm_name = "v",
        .dependencies = featureSet(&[_]Feature{
            .zve64d,
            .zvl128b,
        }),
    };
    result[@intFromEnum(Feature.ventana_veyron)] = .{
        .llvm_name = "ventana-veyron",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xcvalu)] = .{
        .llvm_name = "xcvalu",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xcvbi)] = .{
        .llvm_name = "xcvbi",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xcvbitmanip)] = .{
        .llvm_name = "xcvbitmanip",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xcvelw)] = .{
        .llvm_name = "xcvelw",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xcvmac)] = .{
        .llvm_name = "xcvmac",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xcvmem)] = .{
        .llvm_name = "xcvmem",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xcvsimd)] = .{
        .llvm_name = "xcvsimd",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xsfvcp)] = .{
        .llvm_name = "xsfvcp",
        .dependencies = featureSet(&[_]Feature{
            .zve32x,
        }),
    };
    result[@intFromEnum(Feature.xsfvfnrclipxfqf)] = .{
        .llvm_name = "xsfvfnrclipxfqf",
        .dependencies = featureSet(&[_]Feature{
            .zve32f,
        }),
    };
    result[@intFromEnum(Feature.xsfvfwmaccqqq)] = .{
        .llvm_name = "xsfvfwmaccqqq",
        .dependencies = featureSet(&[_]Feature{
            .experimental_zvfbfmin,
        }),
    };
    result[@intFromEnum(Feature.xsfvqmaccdod)] = .{
        .llvm_name = "xsfvqmaccdod",
        .dependencies = featureSet(&[_]Feature{
            .zve32x,
        }),
    };
    result[@intFromEnum(Feature.xsfvqmaccqoq)] = .{
        .llvm_name = "xsfvqmaccqoq",
        .dependencies = featureSet(&[_]Feature{
            .zve32x,
        }),
    };
    result[@intFromEnum(Feature.xtheadba)] = .{
        .llvm_name = "xtheadba",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xtheadbb)] = .{
        .llvm_name = "xtheadbb",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xtheadbs)] = .{
        .llvm_name = "xtheadbs",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xtheadcmo)] = .{
        .llvm_name = "xtheadcmo",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xtheadcondmov)] = .{
        .llvm_name = "xtheadcondmov",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xtheadfmemidx)] = .{
        .llvm_name = "xtheadfmemidx",
        .dependencies = featureSet(&[_]Feature{
            .f,
        }),
    };
    result[@intFromEnum(Feature.xtheadmac)] = .{
        .llvm_name = "xtheadmac",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xtheadmemidx)] = .{
        .llvm_name = "xtheadmemidx",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xtheadmempair)] = .{
        .llvm_name = "xtheadmempair",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xtheadsync)] = .{
        .llvm_name = "xtheadsync",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xtheadvdot)] = .{
        .llvm_name = "xtheadvdot",
        .dependencies = featureSet(&[_]Feature{
            .v,
        }),
    };
    result[@intFromEnum(Feature.xventanacondops)] = .{
        .llvm_name = "xventanacondops",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.za128rs)] = .{
        .llvm_name = "za128rs",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.za64rs)] = .{
        .llvm_name = "za64rs",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zawrs)] = .{
        .llvm_name = "zawrs",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zba)] = .{
        .llvm_name = "zba",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zbb)] = .{
        .llvm_name = "zbb",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zbc)] = .{
        .llvm_name = "zbc",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zbkb)] = .{
        .llvm_name = "zbkb",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zbkc)] = .{
        .llvm_name = "zbkc",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zbkx)] = .{
        .llvm_name = "zbkx",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zbs)] = .{
        .llvm_name = "zbs",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zca)] = .{
        .llvm_name = "zca",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zcb)] = .{
        .llvm_name = "zcb",
        .dependencies = featureSet(&[_]Feature{
            .zca,
        }),
    };
    result[@intFromEnum(Feature.zcd)] = .{
        .llvm_name = "zcd",
        .dependencies = featureSet(&[_]Feature{
            .zca,
        }),
    };
    result[@intFromEnum(Feature.zce)] = .{
        .llvm_name = "zce",
        .dependencies = featureSet(&[_]Feature{
            .zcb,
            .zcmp,
            .zcmt,
        }),
    };
    result[@intFromEnum(Feature.zcf)] = .{
        .llvm_name = "zcf",
        .dependencies = featureSet(&[_]Feature{
            .zca,
        }),
    };
    result[@intFromEnum(Feature.zcmp)] = .{
        .llvm_name = "zcmp",
        .dependencies = featureSet(&[_]Feature{
            .zca,
        }),
    };
    result[@intFromEnum(Feature.zcmt)] = .{
        .llvm_name = "zcmt",
        .dependencies = featureSet(&[_]Feature{
            .zca,
            .zicsr,
        }),
    };
    result[@intFromEnum(Feature.zdinx)] = .{
        .llvm_name = "zdinx",
        .dependencies = featureSet(&[_]Feature{
            .zfinx,
        }),
    };
    result[@intFromEnum(Feature.zexth_fusion)] = .{
        .llvm_name = "zexth-fusion",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zextw_fusion)] = .{
        .llvm_name = "zextw-fusion",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zfa)] = .{
        .llvm_name = "zfa",
        .dependencies = featureSet(&[_]Feature{
            .f,
        }),
    };
    result[@intFromEnum(Feature.zfh)] = .{
        .llvm_name = "zfh",
        .dependencies = featureSet(&[_]Feature{
            .zfhmin,
        }),
    };
    result[@intFromEnum(Feature.zfhmin)] = .{
        .llvm_name = "zfhmin",
        .dependencies = featureSet(&[_]Feature{
            .f,
        }),
    };
    result[@intFromEnum(Feature.zfinx)] = .{
        .llvm_name = "zfinx",
        .dependencies = featureSet(&[_]Feature{
            .zicsr,
        }),
    };
    result[@intFromEnum(Feature.zhinx)] = .{
        .llvm_name = "zhinx",
        .dependencies = featureSet(&[_]Feature{
            .zhinxmin,
        }),
    };
    result[@intFromEnum(Feature.zhinxmin)] = .{
        .llvm_name = "zhinxmin",
        .dependencies = featureSet(&[_]Feature{
            .zfinx,
        }),
    };
    result[@intFromEnum(Feature.zic64b)] = .{
        .llvm_name = "zic64b",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zicbom)] = .{
        .llvm_name = "zicbom",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zicbop)] = .{
        .llvm_name = "zicbop",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zicboz)] = .{
        .llvm_name = "zicboz",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.ziccamoa)] = .{
        .llvm_name = "ziccamoa",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.ziccif)] = .{
        .llvm_name = "ziccif",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zicclsm)] = .{
        .llvm_name = "zicclsm",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.ziccrse)] = .{
        .llvm_name = "ziccrse",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zicntr)] = .{
        .llvm_name = "zicntr",
        .dependencies = featureSet(&[_]Feature{
            .zicsr,
        }),
    };
    result[@intFromEnum(Feature.zicond)] = .{
        .llvm_name = "zicond",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zicsr)] = .{
        .llvm_name = "zicsr",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zifencei)] = .{
        .llvm_name = "zifencei",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zihintntl)] = .{
        .llvm_name = "zihintntl",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zihintpause)] = .{
        .llvm_name = "zihintpause",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zihpm)] = .{
        .llvm_name = "zihpm",
        .dependencies = featureSet(&[_]Feature{
            .zicsr,
        }),
    };
    result[@intFromEnum(Feature.zk)] = .{
        .llvm_name = "zk",
        .dependencies = featureSet(&[_]Feature{
            .zkn,
            .zkr,
            .zkt,
        }),
    };
    result[@intFromEnum(Feature.zkn)] = .{
        .llvm_name = "zkn",
        .dependencies = featureSet(&[_]Feature{
            .zbkb,
            .zbkc,
            .zbkx,
            .zknd,
            .zkne,
            .zknh,
        }),
    };
    result[@intFromEnum(Feature.zknd)] = .{
        .llvm_name = "zknd",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zkne)] = .{
        .llvm_name = "zkne",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zknh)] = .{
        .llvm_name = "zknh",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zkr)] = .{
        .llvm_name = "zkr",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zks)] = .{
        .llvm_name = "zks",
        .dependencies = featureSet(&[_]Feature{
            .zbkb,
            .zbkc,
            .zbkx,
            .zksed,
            .zksh,
        }),
    };
    result[@intFromEnum(Feature.zksed)] = .{
        .llvm_name = "zksed",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zksh)] = .{
        .llvm_name = "zksh",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zkt)] = .{
        .llvm_name = "zkt",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zmmul)] = .{
        .llvm_name = "zmmul",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zvbb)] = .{
        .llvm_name = "zvbb",
        .dependencies = featureSet(&[_]Feature{
            .zvkb,
        }),
    };
    result[@intFromEnum(Feature.zvbc)] = .{
        .llvm_name = "zvbc",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zve32f)] = .{
        .llvm_name = "zve32f",
        .dependencies = featureSet(&[_]Feature{
            .f,
            .zve32x,
        }),
    };
    result[@intFromEnum(Feature.zve32x)] = .{
        .llvm_name = "zve32x",
        .dependencies = featureSet(&[_]Feature{
            .zicsr,
            .zvl32b,
        }),
    };
    result[@intFromEnum(Feature.zve64d)] = .{
        .llvm_name = "zve64d",
        .dependencies = featureSet(&[_]Feature{
            .d,
            .zve64f,
        }),
    };
    result[@intFromEnum(Feature.zve64f)] = .{
        .llvm_name = "zve64f",
        .dependencies = featureSet(&[_]Feature{
            .zve32f,
            .zve64x,
        }),
    };
    result[@intFromEnum(Feature.zve64x)] = .{
        .llvm_name = "zve64x",
        .dependencies = featureSet(&[_]Feature{
            .zve32x,
            .zvl64b,
        }),
    };
    result[@intFromEnum(Feature.zvfh)] = .{
        .llvm_name = "zvfh",
        .dependencies = featureSet(&[_]Feature{
            .zfhmin,
            .zvfhmin,
        }),
    };
    result[@intFromEnum(Feature.zvfhmin)] = .{
        .llvm_name = "zvfhmin",
        .dependencies = featureSet(&[_]Feature{
            .zve32f,
        }),
    };
    result[@intFromEnum(Feature.zvkb)] = .{
        .llvm_name = "zvkb",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zvkg)] = .{
        .llvm_name = "zvkg",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zvkn)] = .{
        .llvm_name = "zvkn",
        .dependencies = featureSet(&[_]Feature{
            .zvkb,
            .zvkned,
            .zvknhb,
            .zvkt,
        }),
    };
    result[@intFromEnum(Feature.zvknc)] = .{
        .llvm_name = "zvknc",
        .dependencies = featureSet(&[_]Feature{
            .zvbc,
            .zvkn,
        }),
    };
    result[@intFromEnum(Feature.zvkned)] = .{
        .llvm_name = "zvkned",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zvkng)] = .{
        .llvm_name = "zvkng",
        .dependencies = featureSet(&[_]Feature{
            .zvkg,
            .zvkn,
        }),
    };
    result[@intFromEnum(Feature.zvknha)] = .{
        .llvm_name = "zvknha",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zvknhb)] = .{
        .llvm_name = "zvknhb",
        .dependencies = featureSet(&[_]Feature{
            .zve64x,
        }),
    };
    result[@intFromEnum(Feature.zvks)] = .{
        .llvm_name = "zvks",
        .dependencies = featureSet(&[_]Feature{
            .zvkb,
            .zvksed,
            .zvksh,
            .zvkt,
        }),
    };
    result[@intFromEnum(Feature.zvksc)] = .{
        .llvm_name = "zvksc",
        .dependencies = featureSet(&[_]Feature{
            .zvbc,
            .zvks,
        }),
    };
    result[@intFromEnum(Feature.zvksed)] = .{
        .llvm_name = "zvksed",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zvksg)] = .{
        .llvm_name = "zvksg",
        .dependencies = featureSet(&[_]Feature{
            .zvkg,
            .zvks,
        }),
    };
    result[@intFromEnum(Feature.zvksh)] = .{
        .llvm_name = "zvksh",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zvkt)] = .{
        .llvm_name = "zvkt",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zvl1024b)] = .{
        .llvm_name = "zvl1024b",
        .dependencies = featureSet(&[_]Feature{
            .zvl512b,
        }),
    };
    result[@intFromEnum(Feature.zvl128b)] = .{
        .llvm_name = "zvl128b",
        .dependencies = featureSet(&[_]Feature{
            .zvl64b,
        }),
    };
    result[@intFromEnum(Feature.zvl16384b)] = .{
        .llvm_name = "zvl16384b",
        .dependencies = featureSet(&[_]Feature{
            .zvl8192b,
        }),
    };
    result[@intFromEnum(Feature.zvl2048b)] = .{
        .llvm_name = "zvl2048b",
        .dependencies = featureSet(&[_]Feature{
            .zvl1024b,
        }),
    };
    result[@intFromEnum(Feature.zvl256b)] = .{
        .llvm_name = "zvl256b",
        .dependencies = featureSet(&[_]Feature{
            .zvl128b,
        }),
    };
    result[@intFromEnum(Feature.zvl32768b)] = .{
        .llvm_name = "zvl32768b",
        .dependencies = featureSet(&[_]Feature{
            .zvl16384b,
        }),
    };
    result[@intFromEnum(Feature.zvl32b)] = .{
        .llvm_name = "zvl32b",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.zvl4096b)] = .{
        .llvm_name = "zvl4096b",
        .dependencies = featureSet(&[_]Feature{
            .zvl2048b,
        }),
    };
    result[@intFromEnum(Feature.zvl512b)] = .{
        .llvm_name = "zvl512b",
        .dependencies = featureSet(&[_]Feature{
            .zvl256b,
        }),
    };
    result[@intFromEnum(Feature.zvl64b)] = .{
        .llvm_name = "zvl64b",
        .dependencies = featureSet(&[_]Feature{
            .zvl32b,
        }),
    };
    result[@intFromEnum(Feature.zvl65536b)] = .{
        .llvm_name = "zvl65536b",
        .dependencies = featureSet(&[_]Feature{
            .zvl32768b,
        }),
    };
    result[@intFromEnum(Feature.zvl8192b)] = .{
        .llvm_name = "zvl8192b",
        .dependencies = featureSet(&[_]Feature{
            .zvl4096b,
        }),
    };
    const ti = @typeInfo(Feature);
    for (&result, 0..) |*elem, i| {
        elem.index = i;
        elem.name = ti.Enum.fields[i].name;
    }
    break :blk result;
};

pub const feature_descs = blk: {
    const len = @typeInfo(Feature).Enum.fields.len;
    var result: [len][]const u8 = undefined;
    result[@intFromEnum(Feature.@"32bit")] = "Implements RV32";
    result[@intFromEnum(Feature.@"64bit")] = "Implements RV64";
    result[@intFromEnum(Feature.a)] = "'A' (Atomic Instructions)";
    result[@intFromEnum(Feature.auipc_addi_fusion)] = "Enable AUIPC+ADDI macrofusion";
    result[@intFromEnum(Feature.c)] = "'C' (Compressed Instructions)";
    result[@intFromEnum(Feature.conditional_cmv_fusion)] = "Enable branch+c.mv fusion";
    result[@intFromEnum(Feature.d)] = "'D' (Double-Precision Floating-Point)";
    result[@intFromEnum(Feature.dlen_factor_2)] = "Vector unit DLEN(data path width) is half of VLEN";
    result[@intFromEnum(Feature.e)] = "Implements RV{32,64}E (provides 16 rather than 32 GPRs)";
    result[@intFromEnum(Feature.experimental)] = "Experimental intrinsics";
    result[@intFromEnum(Feature.experimental_zacas)] = "'Zacas' (Atomic Compare-And-Swap Instructions)";
    result[@intFromEnum(Feature.experimental_zcmop)] = "'Zcmop' (Compressed May-Be-Operations)";
    result[@intFromEnum(Feature.experimental_zfbfmin)] = "'Zfbfmin' (Scalar BF16 Converts)";
    result[@intFromEnum(Feature.experimental_zicfilp)] = "'Zicfilp' (Landing pad)";
    result[@intFromEnum(Feature.experimental_zicfiss)] = "'Zicfiss' (Shadow stack)";
    result[@intFromEnum(Feature.experimental_zimop)] = "'Zimop' (May-Be-Operations)";
    result[@intFromEnum(Feature.experimental_ztso)] = "'Ztso' (Memory Model - Total Store Order)";
    result[@intFromEnum(Feature.experimental_zvfbfmin)] = "'Zvbfmin' (Vector BF16 Converts)";
    result[@intFromEnum(Feature.experimental_zvfbfwma)] = "'Zvfbfwma' (Vector BF16 widening mul-add)";
    result[@intFromEnum(Feature.f)] = "'F' (Single-Precision Floating-Point)";
    result[@intFromEnum(Feature.fast_unaligned_access)] = "Has reasonably performant unaligned loads and stores (both scalar and vector)";
    result[@intFromEnum(Feature.forced_atomics)] = "Assume that lock-free native-width atomics are available";
    result[@intFromEnum(Feature.h)] = "'H' (Hypervisor)";
    result[@intFromEnum(Feature.i)] = "'I' (Base Integer Instruction Set)";
    result[@intFromEnum(Feature.ld_add_fusion)] = "Enable LD+ADD macrofusion";
    result[@intFromEnum(Feature.lui_addi_fusion)] = "Enable LUI+ADDI macro fusion";
    result[@intFromEnum(Feature.m)] = "'M' (Integer Multiplication and Division)";
    result[@intFromEnum(Feature.no_default_unroll)] = "Disable default unroll preference.";
    result[@intFromEnum(Feature.no_optimized_zero_stride_load)] = "Hasn't optimized (perform fewer memory operations)zero-stride vector load";
    result[@intFromEnum(Feature.no_rvc_hints)] = "Disable RVC Hint Instructions.";
    result[@intFromEnum(Feature.relax)] = "Enable Linker relaxation.";
    result[@intFromEnum(Feature.reserve_x1)] = "Reserve X1";
    result[@intFromEnum(Feature.reserve_x10)] = "Reserve X10";
    result[@intFromEnum(Feature.reserve_x11)] = "Reserve X11";
    result[@intFromEnum(Feature.reserve_x12)] = "Reserve X12";
    result[@intFromEnum(Feature.reserve_x13)] = "Reserve X13";
    result[@intFromEnum(Feature.reserve_x14)] = "Reserve X14";
    result[@intFromEnum(Feature.reserve_x15)] = "Reserve X15";
    result[@intFromEnum(Feature.reserve_x16)] = "Reserve X16";
    result[@intFromEnum(Feature.reserve_x17)] = "Reserve X17";
    result[@intFromEnum(Feature.reserve_x18)] = "Reserve X18";
    result[@intFromEnum(Feature.reserve_x19)] = "Reserve X19";
    result[@intFromEnum(Feature.reserve_x2)] = "Reserve X2";
    result[@intFromEnum(Feature.reserve_x20)] = "Reserve X20";
    result[@intFromEnum(Feature.reserve_x21)] = "Reserve X21";
    result[@intFromEnum(Feature.reserve_x22)] = "Reserve X22";
    result[@intFromEnum(Feature.reserve_x23)] = "Reserve X23";
    result[@intFromEnum(Feature.reserve_x24)] = "Reserve X24";
    result[@intFromEnum(Feature.reserve_x25)] = "Reserve X25";
    result[@intFromEnum(Feature.reserve_x26)] = "Reserve X26";
    result[@intFromEnum(Feature.reserve_x27)] = "Reserve X27";
    result[@intFromEnum(Feature.reserve_x28)] = "Reserve X28";
    result[@intFromEnum(Feature.reserve_x29)] = "Reserve X29";
    result[@intFromEnum(Feature.reserve_x3)] = "Reserve X3";
    result[@intFromEnum(Feature.reserve_x30)] = "Reserve X30";
    result[@intFromEnum(Feature.reserve_x31)] = "Reserve X31";
    result[@intFromEnum(Feature.reserve_x4)] = "Reserve X4";
    result[@intFromEnum(Feature.reserve_x5)] = "Reserve X5";
    result[@intFromEnum(Feature.reserve_x6)] = "Reserve X6";
    result[@intFromEnum(Feature.reserve_x7)] = "Reserve X7";
    result[@intFromEnum(Feature.reserve_x8)] = "Reserve X8";
    result[@intFromEnum(Feature.reserve_x9)] = "Reserve X9";
    result[@intFromEnum(Feature.save_restore)] = "Enable save/restore.";
    result[@intFromEnum(Feature.seq_cst_trailing_fence)] = "Enable trailing fence for seq-cst store.";
    result[@intFromEnum(Feature.shifted_zextw_fusion)] = "Enable SLLI+SRLI to be fused when computing (shifted) word zero extension";
    result[@intFromEnum(Feature.short_forward_branch_opt)] = "Enable short forward branch optimization";
    result[@intFromEnum(Feature.smaia)] = "'Smaia' (Advanced Interrupt Architecture Machine Level)";
    result[@intFromEnum(Feature.smepmp)] = "'Smepmp' (Enhanced Physical Memory Protection)";
    result[@intFromEnum(Feature.ssaia)] = "'Ssaia' (Advanced Interrupt Architecture Supervisor Level)";
    result[@intFromEnum(Feature.svinval)] = "'Svinval' (Fine-Grained Address-Translation Cache Invalidation)";
    result[@intFromEnum(Feature.svnapot)] = "'Svnapot' (NAPOT Translation Contiguity)";
    result[@intFromEnum(Feature.svpbmt)] = "'Svpbmt' (Page-Based Memory Types)";
    result[@intFromEnum(Feature.tagged_globals)] = "Use an instruction sequence for taking the address of a global that allows a memory tag in the upper address bits";
    result[@intFromEnum(Feature.unaligned_scalar_mem)] = "Has reasonably performant unaligned scalar loads and stores";
    result[@intFromEnum(Feature.use_postra_scheduler)] = "Schedule again after register allocation";
    result[@intFromEnum(Feature.v)] = "'V' (Vector Extension for Application Processors)";
    result[@intFromEnum(Feature.ventana_veyron)] = "Ventana Veyron-Series processors";
    result[@intFromEnum(Feature.xcvalu)] = "'XCValu' (CORE-V ALU Operations)";
    result[@intFromEnum(Feature.xcvbi)] = "'XCVbi' (CORE-V Immediate Branching)";
    result[@intFromEnum(Feature.xcvbitmanip)] = "'XCVbitmanip' (CORE-V Bit Manipulation)";
    result[@intFromEnum(Feature.xcvelw)] = "'XCVelw' (CORE-V Event Load Word)";
    result[@intFromEnum(Feature.xcvmac)] = "'XCVmac' (CORE-V Multiply-Accumulate)";
    result[@intFromEnum(Feature.xcvmem)] = "'XCVmem' (CORE-V Post-incrementing Load & Store)";
    result[@intFromEnum(Feature.xcvsimd)] = "'XCVsimd' (CORE-V SIMD ALU)";
    result[@intFromEnum(Feature.xsfvcp)] = "'XSfvcp' (SiFive Custom Vector Coprocessor Interface Instructions)";
    result[@intFromEnum(Feature.xsfvfnrclipxfqf)] = "'XSfvfnrclipxfqf' (SiFive FP32-to-int8 Ranged Clip Instructions)";
    result[@intFromEnum(Feature.xsfvfwmaccqqq)] = "'XSfvfwmaccqqq' (SiFive Matrix Multiply Accumulate Instruction and 4-by-4))";
    result[@intFromEnum(Feature.xsfvqmaccdod)] = "'XSfvqmaccdod' (SiFive Int8 Matrix Multiplication Instructions (2-by-8 and 8-by-2))";
    result[@intFromEnum(Feature.xsfvqmaccqoq)] = "'XSfvqmaccqoq' (SiFive Int8 Matrix Multiplication Instructions (4-by-8 and 8-by-4))";
    result[@intFromEnum(Feature.xtheadba)] = "'xtheadba' (T-Head address calculation instructions)";
    result[@intFromEnum(Feature.xtheadbb)] = "'xtheadbb' (T-Head basic bit-manipulation instructions)";
    result[@intFromEnum(Feature.xtheadbs)] = "'xtheadbs' (T-Head single-bit instructions)";
    result[@intFromEnum(Feature.xtheadcmo)] = "'xtheadcmo' (T-Head cache management instructions)";
    result[@intFromEnum(Feature.xtheadcondmov)] = "'xtheadcondmov' (T-Head conditional move instructions)";
    result[@intFromEnum(Feature.xtheadfmemidx)] = "'xtheadfmemidx' (T-Head FP Indexed Memory Operations)";
    result[@intFromEnum(Feature.xtheadmac)] = "'xtheadmac' (T-Head Multiply-Accumulate Instructions)";
    result[@intFromEnum(Feature.xtheadmemidx)] = "'xtheadmemidx' (T-Head Indexed Memory Operations)";
    result[@intFromEnum(Feature.xtheadmempair)] = "'xtheadmempair' (T-Head two-GPR Memory Operations)";
    result[@intFromEnum(Feature.xtheadsync)] = "'xtheadsync' (T-Head multicore synchronization instructions)";
    result[@intFromEnum(Feature.xtheadvdot)] = "'xtheadvdot' (T-Head Vector Extensions for Dot)";
    result[@intFromEnum(Feature.xventanacondops)] = "'XVentanaCondOps' (Ventana Conditional Ops)";
    result[@intFromEnum(Feature.za128rs)] = "'Za128rs' (Reservation Set Size of at Most 128 Bytes)";
    result[@intFromEnum(Feature.za64rs)] = "'Za64rs' (Reservation Set Size of at Most 64 Bytes)";
    result[@intFromEnum(Feature.zawrs)] = "'Zawrs' (Wait on Reservation Set)";
    result[@intFromEnum(Feature.zba)] = "'Zba' (Address Generation Instructions)";
    result[@intFromEnum(Feature.zbb)] = "'Zbb' (Basic Bit-Manipulation)";
    result[@intFromEnum(Feature.zbc)] = "'Zbc' (Carry-Less Multiplication)";
    result[@intFromEnum(Feature.zbkb)] = "'Zbkb' (Bitmanip instructions for Cryptography)";
    result[@intFromEnum(Feature.zbkc)] = "'Zbkc' (Carry-less multiply instructions for Cryptography)";
    result[@intFromEnum(Feature.zbkx)] = "'Zbkx' (Crossbar permutation instructions)";
    result[@intFromEnum(Feature.zbs)] = "'Zbs' (Single-Bit Instructions)";
    result[@intFromEnum(Feature.zca)] = "'Zca' (part of the C extension, excluding compressed floating point loads/stores)";
    result[@intFromEnum(Feature.zcb)] = "'Zcb' (Compressed basic bit manipulation instructions)";
    result[@intFromEnum(Feature.zcd)] = "'Zcd' (Compressed Double-Precision Floating-Point Instructions)";
    result[@intFromEnum(Feature.zce)] = "'Zce' (Compressed extensions for microcontrollers)";
    result[@intFromEnum(Feature.zcf)] = "'Zcf' (Compressed Single-Precision Floating-Point Instructions)";
    result[@intFromEnum(Feature.zcmp)] = "'Zcmp' (sequenced instuctions for code-size reduction)";
    result[@intFromEnum(Feature.zcmt)] = "'Zcmt' (table jump instuctions for code-size reduction)";
    result[@intFromEnum(Feature.zdinx)] = "'Zdinx' (Double in Integer)";
    result[@intFromEnum(Feature.zexth_fusion)] = "Enable SLLI+SRLI to be fused to zero extension of halfword";
    result[@intFromEnum(Feature.zextw_fusion)] = "Enable SLLI+SRLI to be fused to zero extension of word";
    result[@intFromEnum(Feature.zfa)] = "'Zfa' (Additional Floating-Point)";
    result[@intFromEnum(Feature.zfh)] = "'Zfh' (Half-Precision Floating-Point)";
    result[@intFromEnum(Feature.zfhmin)] = "'Zfhmin' (Half-Precision Floating-Point Minimal)";
    result[@intFromEnum(Feature.zfinx)] = "'Zfinx' (Float in Integer)";
    result[@intFromEnum(Feature.zhinx)] = "'Zhinx' (Half Float in Integer)";
    result[@intFromEnum(Feature.zhinxmin)] = "'Zhinxmin' (Half Float in Integer Minimal)";
    result[@intFromEnum(Feature.zic64b)] = "'Zic64b' (Cache Block Size Is 64 Bytes)";
    result[@intFromEnum(Feature.zicbom)] = "'Zicbom' (Cache-Block Management Instructions)";
    result[@intFromEnum(Feature.zicbop)] = "'Zicbop' (Cache-Block Prefetch Instructions)";
    result[@intFromEnum(Feature.zicboz)] = "'Zicboz' (Cache-Block Zero Instructions)";
    result[@intFromEnum(Feature.ziccamoa)] = "'Ziccamoa' (Main Memory Supports All Atomics in A)";
    result[@intFromEnum(Feature.ziccif)] = "'Ziccif' (Main Memory Supports Instruction Fetch with Atomicity Requirement)";
    result[@intFromEnum(Feature.zicclsm)] = "'Zicclsm' (Main Memory Supports Misaligned Loads/Stores)";
    result[@intFromEnum(Feature.ziccrse)] = "'Ziccrse' (Main Memory Supports Forward Progress on LR/SC Sequences)";
    result[@intFromEnum(Feature.zicntr)] = "'Zicntr' (Base Counters and Timers)";
    result[@intFromEnum(Feature.zicond)] = "'Zicond' (Integer Conditional Operations)";
    result[@intFromEnum(Feature.zicsr)] = "'zicsr' (CSRs)";
    result[@intFromEnum(Feature.zifencei)] = "'Zifencei' (fence.i)";
    result[@intFromEnum(Feature.zihintntl)] = "'Zihintntl' (Non-Temporal Locality Hints)";
    result[@intFromEnum(Feature.zihintpause)] = "'Zihintpause' (Pause Hint)";
    result[@intFromEnum(Feature.zihpm)] = "'Zihpm' (Hardware Performance Counters)";
    result[@intFromEnum(Feature.zk)] = "'Zk' (Standard scalar cryptography extension)";
    result[@intFromEnum(Feature.zkn)] = "'Zkn' (NIST Algorithm Suite)";
    result[@intFromEnum(Feature.zknd)] = "'Zknd' (NIST Suite: AES Decryption)";
    result[@intFromEnum(Feature.zkne)] = "'Zkne' (NIST Suite: AES Encryption)";
    result[@intFromEnum(Feature.zknh)] = "'Zknh' (NIST Suite: Hash Function Instructions)";
    result[@intFromEnum(Feature.zkr)] = "'Zkr' (Entropy Source Extension)";
    result[@intFromEnum(Feature.zks)] = "'Zks' (ShangMi Algorithm Suite)";
    result[@intFromEnum(Feature.zksed)] = "'Zksed' (ShangMi Suite: SM4 Block Cipher Instructions)";
    result[@intFromEnum(Feature.zksh)] = "'Zksh' (ShangMi Suite: SM3 Hash Function Instructions)";
    result[@intFromEnum(Feature.zkt)] = "'Zkt' (Data Independent Execution Latency)";
    result[@intFromEnum(Feature.zmmul)] = "'Zmmul' (Integer Multiplication)";
    result[@intFromEnum(Feature.zvbb)] = "'Zvbb' (Vector basic bit-manipulation instructions)";
    result[@intFromEnum(Feature.zvbc)] = "'Zvbc' (Vector Carryless Multiplication)";
    result[@intFromEnum(Feature.zve32f)] = "'Zve32f' (Vector Extensions for Embedded Processors with maximal 32 EEW and F extension)";
    result[@intFromEnum(Feature.zve32x)] = "'Zve32x' (Vector Extensions for Embedded Processors with maximal 32 EEW)";
    result[@intFromEnum(Feature.zve64d)] = "'Zve64d' (Vector Extensions for Embedded Processors with maximal 64 EEW, F and D extension)";
    result[@intFromEnum(Feature.zve64f)] = "'Zve64f' (Vector Extensions for Embedded Processors with maximal 64 EEW and F extension)";
    result[@intFromEnum(Feature.zve64x)] = "'Zve64x' (Vector Extensions for Embedded Processors with maximal 64 EEW)";
    result[@intFromEnum(Feature.zvfh)] = "'Zvfh' (Vector Half-Precision Floating-Point)";
    result[@intFromEnum(Feature.zvfhmin)] = "'Zvfhmin' (Vector Half-Precision Floating-Point Minimal)";
    result[@intFromEnum(Feature.zvkb)] = "'Zvkb' (Vector Bit-manipulation used in Cryptography)";
    result[@intFromEnum(Feature.zvkg)] = "'Zvkg' (Vector GCM instructions for Cryptography)";
    result[@intFromEnum(Feature.zvkn)] = "'Zvkn' (shorthand for 'Zvkned', 'Zvknhb', 'Zvkb', and 'Zvkt')";
    result[@intFromEnum(Feature.zvknc)] = "'Zvknc' (shorthand for 'Zvknc' and 'Zvbc')";
    result[@intFromEnum(Feature.zvkned)] = "'Zvkned' (Vector AES Encryption & Decryption (Single Round))";
    result[@intFromEnum(Feature.zvkng)] = "'zvkng' (shorthand for 'Zvkn' and 'Zvkg')";
    result[@intFromEnum(Feature.zvknha)] = "'Zvknha' (Vector SHA-2 (SHA-256 only))";
    result[@intFromEnum(Feature.zvknhb)] = "'Zvknhb' (Vector SHA-2 (SHA-256 and SHA-512))";
    result[@intFromEnum(Feature.zvks)] = "'Zvks' (shorthand for 'Zvksed', 'Zvksh', 'Zvkb', and 'Zvkt')";
    result[@intFromEnum(Feature.zvksc)] = "'Zvksc' (shorthand for 'Zvks' and 'Zvbc')";
    result[@intFromEnum(Feature.zvksed)] = "'Zvksed' (SM4 Block Cipher Instructions)";
    result[@intFromEnum(Feature.zvksg)] = "'Zvksg' (shorthand for 'Zvks' and 'Zvkg')";
    result[@intFromEnum(Feature.zvksh)] = "'Zvksh' (SM3 Hash Function Instructions)";
    result[@intFromEnum(Feature.zvkt)] = "'Zvkt' (Vector Data-Independent Execution Latency)";
    result[@intFromEnum(Feature.zvl1024b)] = "'Zvl' (Minimum Vector Length) 1024";
    result[@intFromEnum(Feature.zvl128b)] = "'Zvl' (Minimum Vector Length) 128";
    result[@intFromEnum(Feature.zvl16384b)] = "'Zvl' (Minimum Vector Length) 16384";
    result[@intFromEnum(Feature.zvl2048b)] = "'Zvl' (Minimum Vector Length) 2048";
    result[@intFromEnum(Feature.zvl256b)] = "'Zvl' (Minimum Vector Length) 256";
    result[@intFromEnum(Feature.zvl32768b)] = "'Zvl' (Minimum Vector Length) 32768";
    result[@intFromEnum(Feature.zvl32b)] = "'Zvl' (Minimum Vector Length) 32";
    result[@intFromEnum(Feature.zvl4096b)] = "'Zvl' (Minimum Vector Length) 4096";
    result[@intFromEnum(Feature.zvl512b)] = "'Zvl' (Minimum Vector Length) 512";
    result[@intFromEnum(Feature.zvl64b)] = "'Zvl' (Minimum Vector Length) 64";
    result[@intFromEnum(Feature.zvl65536b)] = "'Zvl' (Minimum Vector Length) 65536";
    result[@intFromEnum(Feature.zvl8192b)] = "'Zvl' (Minimum Vector Length) 8192";
    break :blk result;
};

pub const cpu = struct {
    pub const baseline_rv32 = CpuModel{
        .name = "baseline_rv32",
        .llvm_name = null,
        .features = featureSet(&[_]Feature{
            .@"32bit",
            .a,
            .c,
            .d,
            .m,
        }),
    };
    pub const baseline_rv64 = CpuModel{
        .name = "baseline_rv64",
        .llvm_name = null,
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .a,
            .c,
            .d,
            .m,
        }),
    };
    pub const generic = CpuModel{
        .name = "generic",
        .llvm_name = "generic",
        .features = featureSet(&[_]Feature{}),
    };
    pub const generic_rv32 = CpuModel{
        .name = "generic_rv32",
        .llvm_name = "generic-rv32",
        .features = featureSet(&[_]Feature{
            .@"32bit",
        }),
    };
    pub const generic_rv64 = CpuModel{
        .name = "generic_rv64",
        .llvm_name = "generic-rv64",
        .features = featureSet(&[_]Feature{
            .@"64bit",
        }),
    };
    pub const rocket = CpuModel{
        .name = "rocket",
        .llvm_name = "rocket",
        .features = featureSet(&[_]Feature{}),
    };
    pub const rocket_rv32 = CpuModel{
        .name = "rocket_rv32",
        .llvm_name = "rocket-rv32",
        .features = featureSet(&[_]Feature{
            .@"32bit",
            .zicsr,
            .zifencei,
        }),
    };
    pub const rocket_rv64 = CpuModel{
        .name = "rocket_rv64",
        .llvm_name = "rocket-rv64",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .zicsr,
            .zifencei,
        }),
    };
    pub const sifive_7_series = CpuModel{
        .name = "sifive_7_series",
        .llvm_name = "sifive-7-series",
        .features = featureSet(&[_]Feature{
            .no_default_unroll,
            .short_forward_branch_opt,
        }),
    };
    pub const sifive_e20 = CpuModel{
        .name = "sifive_e20",
        .llvm_name = "sifive-e20",
        .features = featureSet(&[_]Feature{
            .@"32bit",
            .c,
            .m,
            .zicsr,
            .zifencei,
        }),
    };
    pub const sifive_e21 = CpuModel{
        .name = "sifive_e21",
        .llvm_name = "sifive-e21",
        .features = featureSet(&[_]Feature{
            .@"32bit",
            .a,
            .c,
            .m,
            .zicsr,
            .zifencei,
        }),
    };
    pub const sifive_e24 = CpuModel{
        .name = "sifive_e24",
        .llvm_name = "sifive-e24",
        .features = featureSet(&[_]Feature{
            .@"32bit",
            .a,
            .c,
            .f,
            .m,
            .zifencei,
        }),
    };
    pub const sifive_e31 = CpuModel{
        .name = "sifive_e31",
        .llvm_name = "sifive-e31",
        .features = featureSet(&[_]Feature{
            .@"32bit",
            .a,
            .c,
            .m,
            .zicsr,
            .zifencei,
        }),
    };
    pub const sifive_e34 = CpuModel{
        .name = "sifive_e34",
        .llvm_name = "sifive-e34",
        .features = featureSet(&[_]Feature{
            .@"32bit",
            .a,
            .c,
            .f,
            .m,
            .zifencei,
        }),
    };
    pub const sifive_e76 = CpuModel{
        .name = "sifive_e76",
        .llvm_name = "sifive-e76",
        .features = featureSet(&[_]Feature{
            .@"32bit",
            .a,
            .c,
            .f,
            .m,
            .no_default_unroll,
            .short_forward_branch_opt,
            .zifencei,
        }),
    };
    pub const sifive_p450 = CpuModel{
        .name = "sifive_p450",
        .llvm_name = "sifive-p450",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .a,
            .auipc_addi_fusion,
            .c,
            .conditional_cmv_fusion,
            .d,
            .fast_unaligned_access,
            .lui_addi_fusion,
            .m,
            .no_default_unroll,
            .za64rs,
            .zba,
            .zbb,
            .zbs,
            .zfhmin,
            .zic64b,
            .zicbom,
            .zicbop,
            .zicboz,
            .ziccamoa,
            .ziccif,
            .zicclsm,
            .ziccrse,
            .zifencei,
            .zihintntl,
            .zihintpause,
            .zihpm,
        }),
    };
    pub const sifive_p670 = CpuModel{
        .name = "sifive_p670",
        .llvm_name = "sifive-p670",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .a,
            .auipc_addi_fusion,
            .c,
            .conditional_cmv_fusion,
            .fast_unaligned_access,
            .lui_addi_fusion,
            .m,
            .no_default_unroll,
            .v,
            .za64rs,
            .zba,
            .zbb,
            .zbs,
            .zfhmin,
            .zic64b,
            .zicbom,
            .zicbop,
            .zicboz,
            .ziccamoa,
            .ziccif,
            .zicclsm,
            .ziccrse,
            .zifencei,
            .zihintntl,
            .zihintpause,
            .zihpm,
            .zvbb,
            .zvknc,
            .zvkng,
            .zvksc,
            .zvksg,
        }),
    };
    pub const sifive_s21 = CpuModel{
        .name = "sifive_s21",
        .llvm_name = "sifive-s21",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .a,
            .c,
            .m,
            .zicsr,
            .zifencei,
        }),
    };
    pub const sifive_s51 = CpuModel{
        .name = "sifive_s51",
        .llvm_name = "sifive-s51",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .a,
            .c,
            .m,
            .zicsr,
            .zifencei,
        }),
    };
    pub const sifive_s54 = CpuModel{
        .name = "sifive_s54",
        .llvm_name = "sifive-s54",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .a,
            .c,
            .d,
            .m,
            .zifencei,
        }),
    };
    pub const sifive_s76 = CpuModel{
        .name = "sifive_s76",
        .llvm_name = "sifive-s76",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .a,
            .c,
            .d,
            .m,
            .no_default_unroll,
            .short_forward_branch_opt,
            .zifencei,
            .zihintpause,
        }),
    };
    pub const sifive_u54 = CpuModel{
        .name = "sifive_u54",
        .llvm_name = "sifive-u54",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .a,
            .c,
            .d,
            .m,
            .zifencei,
        }),
    };
    pub const sifive_u74 = CpuModel{
        .name = "sifive_u74",
        .llvm_name = "sifive-u74",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .a,
            .c,
            .d,
            .m,
            .no_default_unroll,
            .short_forward_branch_opt,
            .zifencei,
        }),
    };
    pub const sifive_x280 = CpuModel{
        .name = "sifive_x280",
        .llvm_name = "sifive-x280",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .a,
            .c,
            .dlen_factor_2,
            .m,
            .no_default_unroll,
            .short_forward_branch_opt,
            .v,
            .zba,
            .zbb,
            .zfh,
            .zifencei,
            .zvfh,
            .zvl512b,
        }),
    };
    pub const syntacore_scr1_base = CpuModel{
        .name = "syntacore_scr1_base",
        .llvm_name = "syntacore-scr1-base",
        .features = featureSet(&[_]Feature{
            .@"32bit",
            .c,
            .no_default_unroll,
            .zicsr,
            .zifencei,
        }),
    };
    pub const syntacore_scr1_max = CpuModel{
        .name = "syntacore_scr1_max",
        .llvm_name = "syntacore-scr1-max",
        .features = featureSet(&[_]Feature{
            .@"32bit",
            .c,
            .m,
            .no_default_unroll,
            .zicsr,
            .zifencei,
        }),
    };
    pub const veyron_v1 = CpuModel{
        .name = "veyron_v1",
        .llvm_name = "veyron-v1",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .a,
            .auipc_addi_fusion,
            .c,
            .d,
            .ld_add_fusion,
            .lui_addi_fusion,
            .m,
            .shifted_zextw_fusion,
            .ventana_veyron,
            .xventanacondops,
            .zba,
            .zbb,
            .zbc,
            .zbs,
            .zexth_fusion,
            .zextw_fusion,
            .zicbom,
            .zicbop,
            .zicboz,
            .zicntr,
            .zifencei,
            .zihintpause,
            .zihpm,
        }),
    };
    pub const xiangshan_nanhu = CpuModel{
        .name = "xiangshan_nanhu",
        .llvm_name = "xiangshan-nanhu",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .a,
            .c,
            .d,
            .m,
            .svinval,
            .zba,
            .zbb,
            .zbc,
            .zbs,
            .zicbom,
            .zicboz,
            .zifencei,
            .zkn,
            .zksed,
            .zksh,
        }),
    };
};
