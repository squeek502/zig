//! This file is auto-generated by tools/update_cpu_features.zig.

const std = @import("../std.zig");
const CpuFeature = std.Target.Cpu.Feature;
const CpuModel = std.Target.Cpu.Model;

pub const Feature = enum {
    @"16bit_mode",
    @"32bit_mode",
    @"3dnow",
    @"3dnowa",
    @"64bit",
    adx,
    aes,
    allow_light_256_bit,
    amx_bf16,
    amx_complex,
    amx_fp16,
    amx_int8,
    amx_tile,
    avx,
    avx10_1_256,
    avx10_1_512,
    avx2,
    avx512bf16,
    avx512bitalg,
    avx512bw,
    avx512cd,
    avx512dq,
    avx512er,
    avx512f,
    avx512fp16,
    avx512ifma,
    avx512pf,
    avx512vbmi,
    avx512vbmi2,
    avx512vl,
    avx512vnni,
    avx512vp2intersect,
    avx512vpopcntdq,
    avxifma,
    avxneconvert,
    avxvnni,
    avxvnniint16,
    avxvnniint8,
    bmi,
    bmi2,
    branchfusion,
    ccmp,
    cf,
    cldemote,
    clflushopt,
    clwb,
    clzero,
    cmov,
    cmpccxadd,
    crc32,
    cx16,
    cx8,
    egpr,
    enqcmd,
    ermsb,
    evex512,
    f16c,
    false_deps_getmant,
    false_deps_lzcnt_tzcnt,
    false_deps_mulc,
    false_deps_mullq,
    false_deps_perm,
    false_deps_popcnt,
    false_deps_range,
    fast_11bytenop,
    fast_15bytenop,
    fast_7bytenop,
    fast_bextr,
    fast_gather,
    fast_hops,
    fast_lzcnt,
    fast_movbe,
    fast_scalar_fsqrt,
    fast_scalar_shift_masks,
    fast_shld_rotate,
    fast_variable_crosslane_shuffle,
    fast_variable_perlane_shuffle,
    fast_vector_fsqrt,
    fast_vector_shift_masks,
    faster_shift_than_shuffle,
    fma,
    fma4,
    fsgsbase,
    fsrm,
    fxsr,
    gfni,
    harden_sls_ijmp,
    harden_sls_ret,
    hreset,
    idivl_to_divb,
    idivq_to_divl,
    invpcid,
    kl,
    lea_sp,
    lea_uses_ag,
    lvi_cfi,
    lvi_load_hardening,
    lwp,
    lzcnt,
    macrofusion,
    mmx,
    movbe,
    movdir64b,
    movdiri,
    mwaitx,
    ndd,
    no_bypass_delay,
    no_bypass_delay_blend,
    no_bypass_delay_mov,
    no_bypass_delay_shuffle,
    nopl,
    pad_short_functions,
    pclmul,
    pconfig,
    pku,
    popcnt,
    ppx,
    prefer_128_bit,
    prefer_256_bit,
    prefer_mask_registers,
    prefer_movmsk_over_vtest,
    prefer_no_gather,
    prefer_no_scatter,
    prefetchi,
    prefetchwt1,
    prfchw,
    ptwrite,
    push2pop2,
    raoint,
    rdpid,
    rdpru,
    rdrnd,
    rdseed,
    retpoline,
    retpoline_external_thunk,
    retpoline_indirect_branches,
    retpoline_indirect_calls,
    rtm,
    sahf,
    sbb_dep_breaking,
    serialize,
    seses,
    sgx,
    sha,
    sha512,
    shstk,
    slow_3ops_lea,
    slow_incdec,
    slow_lea,
    slow_pmaddwd,
    slow_pmulld,
    slow_shld,
    slow_two_mem_ops,
    slow_unaligned_mem_16,
    slow_unaligned_mem_32,
    sm3,
    sm4,
    soft_float,
    sse,
    sse2,
    sse3,
    sse4_1,
    sse4_2,
    sse4a,
    sse_unaligned_mem,
    ssse3,
    tagged_globals,
    tbm,
    tsxldtrk,
    tuning_fast_imm_vector_shift,
    uintr,
    use_glm_div_sqrt_costs,
    use_slm_arith_costs,
    usermsr,
    vaes,
    vpclmulqdq,
    vzeroupper,
    waitpkg,
    wbnoinvd,
    widekl,
    x87,
    xop,
    xsave,
    xsavec,
    xsaveopt,
    xsaves,
};

pub const featureSet = CpuFeature.feature_set_fns(Feature).featureSet;
pub const featureSetHas = CpuFeature.feature_set_fns(Feature).featureSetHas;
pub const featureSetHasAny = CpuFeature.feature_set_fns(Feature).featureSetHasAny;
pub const featureSetHasAll = CpuFeature.feature_set_fns(Feature).featureSetHasAll;

pub const all_features = blk: {
    const len = @typeInfo(Feature).Enum.fields.len;
    std.debug.assert(len <= CpuFeature.Set.needed_bit_count);
    var result: [len]CpuFeature = undefined;
    result[@intFromEnum(Feature.@"16bit_mode")] = .{
        .llvm_name = "16bit-mode",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.@"32bit_mode")] = .{
        .llvm_name = "32bit-mode",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.@"3dnow")] = .{
        .llvm_name = "3dnow",
        .dependencies = featureSet(&[_]Feature{
            .mmx,
        }),
    };
    result[@intFromEnum(Feature.@"3dnowa")] = .{
        .llvm_name = "3dnowa",
        .dependencies = featureSet(&[_]Feature{
            .@"3dnow",
        }),
    };
    result[@intFromEnum(Feature.@"64bit")] = .{
        .llvm_name = "64bit",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.adx)] = .{
        .llvm_name = "adx",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.aes)] = .{
        .llvm_name = "aes",
        .dependencies = featureSet(&[_]Feature{
            .sse2,
        }),
    };
    result[@intFromEnum(Feature.allow_light_256_bit)] = .{
        .llvm_name = "allow-light-256-bit",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.amx_bf16)] = .{
        .llvm_name = "amx-bf16",
        .dependencies = featureSet(&[_]Feature{
            .amx_tile,
        }),
    };
    result[@intFromEnum(Feature.amx_complex)] = .{
        .llvm_name = "amx-complex",
        .dependencies = featureSet(&[_]Feature{
            .amx_tile,
        }),
    };
    result[@intFromEnum(Feature.amx_fp16)] = .{
        .llvm_name = "amx-fp16",
        .dependencies = featureSet(&[_]Feature{
            .amx_tile,
        }),
    };
    result[@intFromEnum(Feature.amx_int8)] = .{
        .llvm_name = "amx-int8",
        .dependencies = featureSet(&[_]Feature{
            .amx_tile,
        }),
    };
    result[@intFromEnum(Feature.amx_tile)] = .{
        .llvm_name = "amx-tile",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.avx)] = .{
        .llvm_name = "avx",
        .dependencies = featureSet(&[_]Feature{
            .sse4_2,
        }),
    };
    result[@intFromEnum(Feature.avx10_1_256)] = .{
        .llvm_name = "avx10.1-256",
        .dependencies = featureSet(&[_]Feature{
            .avx512bf16,
            .avx512bitalg,
            .avx512cd,
            .avx512fp16,
            .avx512ifma,
            .avx512vbmi,
            .avx512vbmi2,
            .avx512vnni,
            .avx512vpopcntdq,
            .vaes,
            .vpclmulqdq,
        }),
    };
    result[@intFromEnum(Feature.avx10_1_512)] = .{
        .llvm_name = "avx10.1-512",
        .dependencies = featureSet(&[_]Feature{
            .avx10_1_256,
            .evex512,
        }),
    };
    result[@intFromEnum(Feature.avx2)] = .{
        .llvm_name = "avx2",
        .dependencies = featureSet(&[_]Feature{
            .avx,
        }),
    };
    result[@intFromEnum(Feature.avx512bf16)] = .{
        .llvm_name = "avx512bf16",
        .dependencies = featureSet(&[_]Feature{
            .avx512bw,
        }),
    };
    result[@intFromEnum(Feature.avx512bitalg)] = .{
        .llvm_name = "avx512bitalg",
        .dependencies = featureSet(&[_]Feature{
            .avx512bw,
        }),
    };
    result[@intFromEnum(Feature.avx512bw)] = .{
        .llvm_name = "avx512bw",
        .dependencies = featureSet(&[_]Feature{
            .avx512f,
        }),
    };
    result[@intFromEnum(Feature.avx512cd)] = .{
        .llvm_name = "avx512cd",
        .dependencies = featureSet(&[_]Feature{
            .avx512f,
        }),
    };
    result[@intFromEnum(Feature.avx512dq)] = .{
        .llvm_name = "avx512dq",
        .dependencies = featureSet(&[_]Feature{
            .avx512f,
        }),
    };
    result[@intFromEnum(Feature.avx512er)] = .{
        .llvm_name = "avx512er",
        .dependencies = featureSet(&[_]Feature{
            .avx512f,
        }),
    };
    result[@intFromEnum(Feature.avx512f)] = .{
        .llvm_name = "avx512f",
        .dependencies = featureSet(&[_]Feature{
            .avx2,
            .f16c,
            .fma,
        }),
    };
    result[@intFromEnum(Feature.avx512fp16)] = .{
        .llvm_name = "avx512fp16",
        .dependencies = featureSet(&[_]Feature{
            .avx512bw,
            .avx512dq,
            .avx512vl,
        }),
    };
    result[@intFromEnum(Feature.avx512ifma)] = .{
        .llvm_name = "avx512ifma",
        .dependencies = featureSet(&[_]Feature{
            .avx512f,
        }),
    };
    result[@intFromEnum(Feature.avx512pf)] = .{
        .llvm_name = "avx512pf",
        .dependencies = featureSet(&[_]Feature{
            .avx512f,
        }),
    };
    result[@intFromEnum(Feature.avx512vbmi)] = .{
        .llvm_name = "avx512vbmi",
        .dependencies = featureSet(&[_]Feature{
            .avx512bw,
        }),
    };
    result[@intFromEnum(Feature.avx512vbmi2)] = .{
        .llvm_name = "avx512vbmi2",
        .dependencies = featureSet(&[_]Feature{
            .avx512bw,
        }),
    };
    result[@intFromEnum(Feature.avx512vl)] = .{
        .llvm_name = "avx512vl",
        .dependencies = featureSet(&[_]Feature{
            .avx512f,
        }),
    };
    result[@intFromEnum(Feature.avx512vnni)] = .{
        .llvm_name = "avx512vnni",
        .dependencies = featureSet(&[_]Feature{
            .avx512f,
        }),
    };
    result[@intFromEnum(Feature.avx512vp2intersect)] = .{
        .llvm_name = "avx512vp2intersect",
        .dependencies = featureSet(&[_]Feature{
            .avx512f,
        }),
    };
    result[@intFromEnum(Feature.avx512vpopcntdq)] = .{
        .llvm_name = "avx512vpopcntdq",
        .dependencies = featureSet(&[_]Feature{
            .avx512f,
        }),
    };
    result[@intFromEnum(Feature.avxifma)] = .{
        .llvm_name = "avxifma",
        .dependencies = featureSet(&[_]Feature{
            .avx2,
        }),
    };
    result[@intFromEnum(Feature.avxneconvert)] = .{
        .llvm_name = "avxneconvert",
        .dependencies = featureSet(&[_]Feature{
            .avx2,
        }),
    };
    result[@intFromEnum(Feature.avxvnni)] = .{
        .llvm_name = "avxvnni",
        .dependencies = featureSet(&[_]Feature{
            .avx2,
        }),
    };
    result[@intFromEnum(Feature.avxvnniint16)] = .{
        .llvm_name = "avxvnniint16",
        .dependencies = featureSet(&[_]Feature{
            .avx2,
        }),
    };
    result[@intFromEnum(Feature.avxvnniint8)] = .{
        .llvm_name = "avxvnniint8",
        .dependencies = featureSet(&[_]Feature{
            .avx2,
        }),
    };
    result[@intFromEnum(Feature.bmi)] = .{
        .llvm_name = "bmi",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.bmi2)] = .{
        .llvm_name = "bmi2",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.branchfusion)] = .{
        .llvm_name = "branchfusion",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.ccmp)] = .{
        .llvm_name = "ccmp",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.cf)] = .{
        .llvm_name = "cf",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.cldemote)] = .{
        .llvm_name = "cldemote",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.clflushopt)] = .{
        .llvm_name = "clflushopt",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.clwb)] = .{
        .llvm_name = "clwb",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.clzero)] = .{
        .llvm_name = "clzero",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.cmov)] = .{
        .llvm_name = "cmov",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.cmpccxadd)] = .{
        .llvm_name = "cmpccxadd",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.crc32)] = .{
        .llvm_name = "crc32",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.cx16)] = .{
        .llvm_name = "cx16",
        .dependencies = featureSet(&[_]Feature{
            .cx8,
        }),
    };
    result[@intFromEnum(Feature.cx8)] = .{
        .llvm_name = "cx8",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.egpr)] = .{
        .llvm_name = "egpr",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.enqcmd)] = .{
        .llvm_name = "enqcmd",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.ermsb)] = .{
        .llvm_name = "ermsb",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.evex512)] = .{
        .llvm_name = "evex512",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.f16c)] = .{
        .llvm_name = "f16c",
        .dependencies = featureSet(&[_]Feature{
            .avx,
        }),
    };
    result[@intFromEnum(Feature.false_deps_getmant)] = .{
        .llvm_name = "false-deps-getmant",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.false_deps_lzcnt_tzcnt)] = .{
        .llvm_name = "false-deps-lzcnt-tzcnt",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.false_deps_mulc)] = .{
        .llvm_name = "false-deps-mulc",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.false_deps_mullq)] = .{
        .llvm_name = "false-deps-mullq",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.false_deps_perm)] = .{
        .llvm_name = "false-deps-perm",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.false_deps_popcnt)] = .{
        .llvm_name = "false-deps-popcnt",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.false_deps_range)] = .{
        .llvm_name = "false-deps-range",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_11bytenop)] = .{
        .llvm_name = "fast-11bytenop",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_15bytenop)] = .{
        .llvm_name = "fast-15bytenop",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_7bytenop)] = .{
        .llvm_name = "fast-7bytenop",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_bextr)] = .{
        .llvm_name = "fast-bextr",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_gather)] = .{
        .llvm_name = "fast-gather",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_hops)] = .{
        .llvm_name = "fast-hops",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_lzcnt)] = .{
        .llvm_name = "fast-lzcnt",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_movbe)] = .{
        .llvm_name = "fast-movbe",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_scalar_fsqrt)] = .{
        .llvm_name = "fast-scalar-fsqrt",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_scalar_shift_masks)] = .{
        .llvm_name = "fast-scalar-shift-masks",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_shld_rotate)] = .{
        .llvm_name = "fast-shld-rotate",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_variable_crosslane_shuffle)] = .{
        .llvm_name = "fast-variable-crosslane-shuffle",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_variable_perlane_shuffle)] = .{
        .llvm_name = "fast-variable-perlane-shuffle",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_vector_fsqrt)] = .{
        .llvm_name = "fast-vector-fsqrt",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fast_vector_shift_masks)] = .{
        .llvm_name = "fast-vector-shift-masks",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.faster_shift_than_shuffle)] = .{
        .llvm_name = "faster-shift-than-shuffle",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fma)] = .{
        .llvm_name = "fma",
        .dependencies = featureSet(&[_]Feature{
            .avx,
        }),
    };
    result[@intFromEnum(Feature.fma4)] = .{
        .llvm_name = "fma4",
        .dependencies = featureSet(&[_]Feature{
            .avx,
            .sse4a,
        }),
    };
    result[@intFromEnum(Feature.fsgsbase)] = .{
        .llvm_name = "fsgsbase",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fsrm)] = .{
        .llvm_name = "fsrm",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.fxsr)] = .{
        .llvm_name = "fxsr",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.gfni)] = .{
        .llvm_name = "gfni",
        .dependencies = featureSet(&[_]Feature{
            .sse2,
        }),
    };
    result[@intFromEnum(Feature.harden_sls_ijmp)] = .{
        .llvm_name = "harden-sls-ijmp",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.harden_sls_ret)] = .{
        .llvm_name = "harden-sls-ret",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.hreset)] = .{
        .llvm_name = "hreset",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.idivl_to_divb)] = .{
        .llvm_name = "idivl-to-divb",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.idivq_to_divl)] = .{
        .llvm_name = "idivq-to-divl",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.invpcid)] = .{
        .llvm_name = "invpcid",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.kl)] = .{
        .llvm_name = "kl",
        .dependencies = featureSet(&[_]Feature{
            .sse2,
        }),
    };
    result[@intFromEnum(Feature.lea_sp)] = .{
        .llvm_name = "lea-sp",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.lea_uses_ag)] = .{
        .llvm_name = "lea-uses-ag",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.lvi_cfi)] = .{
        .llvm_name = "lvi-cfi",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.lvi_load_hardening)] = .{
        .llvm_name = "lvi-load-hardening",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.lwp)] = .{
        .llvm_name = "lwp",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.lzcnt)] = .{
        .llvm_name = "lzcnt",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.macrofusion)] = .{
        .llvm_name = "macrofusion",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mmx)] = .{
        .llvm_name = "mmx",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.movbe)] = .{
        .llvm_name = "movbe",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.movdir64b)] = .{
        .llvm_name = "movdir64b",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.movdiri)] = .{
        .llvm_name = "movdiri",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.mwaitx)] = .{
        .llvm_name = "mwaitx",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.ndd)] = .{
        .llvm_name = "ndd",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.no_bypass_delay)] = .{
        .llvm_name = "no-bypass-delay",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.no_bypass_delay_blend)] = .{
        .llvm_name = "no-bypass-delay-blend",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.no_bypass_delay_mov)] = .{
        .llvm_name = "no-bypass-delay-mov",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.no_bypass_delay_shuffle)] = .{
        .llvm_name = "no-bypass-delay-shuffle",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.nopl)] = .{
        .llvm_name = "nopl",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.pad_short_functions)] = .{
        .llvm_name = "pad-short-functions",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.pclmul)] = .{
        .llvm_name = "pclmul",
        .dependencies = featureSet(&[_]Feature{
            .sse2,
        }),
    };
    result[@intFromEnum(Feature.pconfig)] = .{
        .llvm_name = "pconfig",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.pku)] = .{
        .llvm_name = "pku",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.popcnt)] = .{
        .llvm_name = "popcnt",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.ppx)] = .{
        .llvm_name = "ppx",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.prefer_128_bit)] = .{
        .llvm_name = "prefer-128-bit",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.prefer_256_bit)] = .{
        .llvm_name = "prefer-256-bit",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.prefer_mask_registers)] = .{
        .llvm_name = "prefer-mask-registers",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.prefer_movmsk_over_vtest)] = .{
        .llvm_name = "prefer-movmsk-over-vtest",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.prefer_no_gather)] = .{
        .llvm_name = "prefer-no-gather",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.prefer_no_scatter)] = .{
        .llvm_name = "prefer-no-scatter",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.prefetchi)] = .{
        .llvm_name = "prefetchi",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.prefetchwt1)] = .{
        .llvm_name = "prefetchwt1",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.prfchw)] = .{
        .llvm_name = "prfchw",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.ptwrite)] = .{
        .llvm_name = "ptwrite",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.push2pop2)] = .{
        .llvm_name = "push2pop2",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.raoint)] = .{
        .llvm_name = "raoint",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.rdpid)] = .{
        .llvm_name = "rdpid",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.rdpru)] = .{
        .llvm_name = "rdpru",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.rdrnd)] = .{
        .llvm_name = "rdrnd",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.rdseed)] = .{
        .llvm_name = "rdseed",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.retpoline)] = .{
        .llvm_name = "retpoline",
        .dependencies = featureSet(&[_]Feature{
            .retpoline_indirect_branches,
            .retpoline_indirect_calls,
        }),
    };
    result[@intFromEnum(Feature.retpoline_external_thunk)] = .{
        .llvm_name = "retpoline-external-thunk",
        .dependencies = featureSet(&[_]Feature{
            .retpoline_indirect_calls,
        }),
    };
    result[@intFromEnum(Feature.retpoline_indirect_branches)] = .{
        .llvm_name = "retpoline-indirect-branches",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.retpoline_indirect_calls)] = .{
        .llvm_name = "retpoline-indirect-calls",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.rtm)] = .{
        .llvm_name = "rtm",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.sahf)] = .{
        .llvm_name = "sahf",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.sbb_dep_breaking)] = .{
        .llvm_name = "sbb-dep-breaking",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.serialize)] = .{
        .llvm_name = "serialize",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.seses)] = .{
        .llvm_name = "seses",
        .dependencies = featureSet(&[_]Feature{
            .lvi_cfi,
        }),
    };
    result[@intFromEnum(Feature.sgx)] = .{
        .llvm_name = "sgx",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.sha)] = .{
        .llvm_name = "sha",
        .dependencies = featureSet(&[_]Feature{
            .sse2,
        }),
    };
    result[@intFromEnum(Feature.sha512)] = .{
        .llvm_name = "sha512",
        .dependencies = featureSet(&[_]Feature{
            .avx2,
        }),
    };
    result[@intFromEnum(Feature.shstk)] = .{
        .llvm_name = "shstk",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.slow_3ops_lea)] = .{
        .llvm_name = "slow-3ops-lea",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.slow_incdec)] = .{
        .llvm_name = "slow-incdec",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.slow_lea)] = .{
        .llvm_name = "slow-lea",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.slow_pmaddwd)] = .{
        .llvm_name = "slow-pmaddwd",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.slow_pmulld)] = .{
        .llvm_name = "slow-pmulld",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.slow_shld)] = .{
        .llvm_name = "slow-shld",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.slow_two_mem_ops)] = .{
        .llvm_name = "slow-two-mem-ops",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.slow_unaligned_mem_16)] = .{
        .llvm_name = "slow-unaligned-mem-16",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.slow_unaligned_mem_32)] = .{
        .llvm_name = "slow-unaligned-mem-32",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.sm3)] = .{
        .llvm_name = "sm3",
        .dependencies = featureSet(&[_]Feature{
            .avx,
        }),
    };
    result[@intFromEnum(Feature.sm4)] = .{
        .llvm_name = "sm4",
        .dependencies = featureSet(&[_]Feature{
            .avx2,
        }),
    };
    result[@intFromEnum(Feature.soft_float)] = .{
        .llvm_name = "soft-float",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.sse)] = .{
        .llvm_name = "sse",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.sse2)] = .{
        .llvm_name = "sse2",
        .dependencies = featureSet(&[_]Feature{
            .sse,
        }),
    };
    result[@intFromEnum(Feature.sse3)] = .{
        .llvm_name = "sse3",
        .dependencies = featureSet(&[_]Feature{
            .sse2,
        }),
    };
    result[@intFromEnum(Feature.sse4_1)] = .{
        .llvm_name = "sse4.1",
        .dependencies = featureSet(&[_]Feature{
            .ssse3,
        }),
    };
    result[@intFromEnum(Feature.sse4_2)] = .{
        .llvm_name = "sse4.2",
        .dependencies = featureSet(&[_]Feature{
            .sse4_1,
        }),
    };
    result[@intFromEnum(Feature.sse4a)] = .{
        .llvm_name = "sse4a",
        .dependencies = featureSet(&[_]Feature{
            .sse3,
        }),
    };
    result[@intFromEnum(Feature.sse_unaligned_mem)] = .{
        .llvm_name = "sse-unaligned-mem",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.ssse3)] = .{
        .llvm_name = "ssse3",
        .dependencies = featureSet(&[_]Feature{
            .sse3,
        }),
    };
    result[@intFromEnum(Feature.tagged_globals)] = .{
        .llvm_name = "tagged-globals",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.tbm)] = .{
        .llvm_name = "tbm",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.tsxldtrk)] = .{
        .llvm_name = "tsxldtrk",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.tuning_fast_imm_vector_shift)] = .{
        .llvm_name = "tuning-fast-imm-vector-shift",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.uintr)] = .{
        .llvm_name = "uintr",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.use_glm_div_sqrt_costs)] = .{
        .llvm_name = "use-glm-div-sqrt-costs",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.use_slm_arith_costs)] = .{
        .llvm_name = "use-slm-arith-costs",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.usermsr)] = .{
        .llvm_name = "usermsr",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.vaes)] = .{
        .llvm_name = "vaes",
        .dependencies = featureSet(&[_]Feature{
            .aes,
            .avx2,
        }),
    };
    result[@intFromEnum(Feature.vpclmulqdq)] = .{
        .llvm_name = "vpclmulqdq",
        .dependencies = featureSet(&[_]Feature{
            .avx,
            .pclmul,
        }),
    };
    result[@intFromEnum(Feature.vzeroupper)] = .{
        .llvm_name = "vzeroupper",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.waitpkg)] = .{
        .llvm_name = "waitpkg",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.wbnoinvd)] = .{
        .llvm_name = "wbnoinvd",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.widekl)] = .{
        .llvm_name = "widekl",
        .dependencies = featureSet(&[_]Feature{
            .kl,
        }),
    };
    result[@intFromEnum(Feature.x87)] = .{
        .llvm_name = "x87",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xop)] = .{
        .llvm_name = "xop",
        .dependencies = featureSet(&[_]Feature{
            .fma4,
        }),
    };
    result[@intFromEnum(Feature.xsave)] = .{
        .llvm_name = "xsave",
        .dependencies = featureSet(&[_]Feature{}),
    };
    result[@intFromEnum(Feature.xsavec)] = .{
        .llvm_name = "xsavec",
        .dependencies = featureSet(&[_]Feature{
            .xsave,
        }),
    };
    result[@intFromEnum(Feature.xsaveopt)] = .{
        .llvm_name = "xsaveopt",
        .dependencies = featureSet(&[_]Feature{
            .xsave,
        }),
    };
    result[@intFromEnum(Feature.xsaves)] = .{
        .llvm_name = "xsaves",
        .dependencies = featureSet(&[_]Feature{
            .xsave,
        }),
    };
    const ti = @typeInfo(Feature);
    for (&result, 0..) |*elem, i| {
        elem.index = i;
        elem.name = ti.Enum.fields[i].name;
    }
    break :blk result;
};

pub const feature_descs = blk: {
    const len = @typeInfo(Feature).Enum.fields.len;
    var result: [len][]const u8 = undefined;
    result[@intFromEnum(Feature.@"16bit_mode")] = "16-bit mode (i8086)";
    result[@intFromEnum(Feature.@"32bit_mode")] = "32-bit mode (80386)";
    result[@intFromEnum(Feature.@"3dnow")] = "Enable 3DNow! instructions";
    result[@intFromEnum(Feature.@"3dnowa")] = "Enable 3DNow! Athlon instructions";
    result[@intFromEnum(Feature.@"64bit")] = "Support 64-bit instructions";
    result[@intFromEnum(Feature.adx)] = "Support ADX instructions";
    result[@intFromEnum(Feature.aes)] = "Enable AES instructions";
    result[@intFromEnum(Feature.allow_light_256_bit)] = "Enable generation of 256-bit load/stores even if we prefer 128-bit";
    result[@intFromEnum(Feature.amx_bf16)] = "Support AMX-BF16 instructions";
    result[@intFromEnum(Feature.amx_complex)] = "Support AMX-COMPLEX instructions";
    result[@intFromEnum(Feature.amx_fp16)] = "Support AMX amx-fp16 instructions";
    result[@intFromEnum(Feature.amx_int8)] = "Support AMX-INT8 instructions";
    result[@intFromEnum(Feature.amx_tile)] = "Support AMX-TILE instructions";
    result[@intFromEnum(Feature.avx)] = "Enable AVX instructions";
    result[@intFromEnum(Feature.avx10_1_256)] = "Support AVX10.1 up to 256-bit instruction";
    result[@intFromEnum(Feature.avx10_1_512)] = "Support AVX10.1 up to 512-bit instruction";
    result[@intFromEnum(Feature.avx2)] = "Enable AVX2 instructions";
    result[@intFromEnum(Feature.avx512bf16)] = "Support bfloat16 floating point";
    result[@intFromEnum(Feature.avx512bitalg)] = "Enable AVX-512 Bit Algorithms";
    result[@intFromEnum(Feature.avx512bw)] = "Enable AVX-512 Byte and Word Instructions";
    result[@intFromEnum(Feature.avx512cd)] = "Enable AVX-512 Conflict Detection Instructions";
    result[@intFromEnum(Feature.avx512dq)] = "Enable AVX-512 Doubleword and Quadword Instructions";
    result[@intFromEnum(Feature.avx512er)] = "Enable AVX-512 Exponential and Reciprocal Instructions";
    result[@intFromEnum(Feature.avx512f)] = "Enable AVX-512 instructions";
    result[@intFromEnum(Feature.avx512fp16)] = "Support 16-bit floating point";
    result[@intFromEnum(Feature.avx512ifma)] = "Enable AVX-512 Integer Fused Multiple-Add";
    result[@intFromEnum(Feature.avx512pf)] = "Enable AVX-512 PreFetch Instructions";
    result[@intFromEnum(Feature.avx512vbmi)] = "Enable AVX-512 Vector Byte Manipulation Instructions";
    result[@intFromEnum(Feature.avx512vbmi2)] = "Enable AVX-512 further Vector Byte Manipulation Instructions";
    result[@intFromEnum(Feature.avx512vl)] = "Enable AVX-512 Vector Length eXtensions";
    result[@intFromEnum(Feature.avx512vnni)] = "Enable AVX-512 Vector Neural Network Instructions";
    result[@intFromEnum(Feature.avx512vp2intersect)] = "Enable AVX-512 vp2intersect";
    result[@intFromEnum(Feature.avx512vpopcntdq)] = "Enable AVX-512 Population Count Instructions";
    result[@intFromEnum(Feature.avxifma)] = "Enable AVX-IFMA";
    result[@intFromEnum(Feature.avxneconvert)] = "Support AVX-NE-CONVERT instructions";
    result[@intFromEnum(Feature.avxvnni)] = "Support AVX_VNNI encoding";
    result[@intFromEnum(Feature.avxvnniint16)] = "Enable AVX-VNNI-INT16";
    result[@intFromEnum(Feature.avxvnniint8)] = "Enable AVX-VNNI-INT8";
    result[@intFromEnum(Feature.bmi)] = "Support BMI instructions";
    result[@intFromEnum(Feature.bmi2)] = "Support BMI2 instructions";
    result[@intFromEnum(Feature.branchfusion)] = "CMP/TEST can be fused with conditional branches";
    result[@intFromEnum(Feature.ccmp)] = "Support conditional cmp & test instructions";
    result[@intFromEnum(Feature.cf)] = "Support conditional faulting";
    result[@intFromEnum(Feature.cldemote)] = "Enable Cache Line Demote";
    result[@intFromEnum(Feature.clflushopt)] = "Flush A Cache Line Optimized";
    result[@intFromEnum(Feature.clwb)] = "Cache Line Write Back";
    result[@intFromEnum(Feature.clzero)] = "Enable Cache Line Zero";
    result[@intFromEnum(Feature.cmov)] = "Enable conditional move instructions";
    result[@intFromEnum(Feature.cmpccxadd)] = "Support CMPCCXADD instructions";
    result[@intFromEnum(Feature.crc32)] = "Enable SSE 4.2 CRC32 instruction (used when SSE4.2 is supported but function is GPR only)";
    result[@intFromEnum(Feature.cx16)] = "64-bit with cmpxchg16b (this is true for most x86-64 chips, but not the first AMD chips)";
    result[@intFromEnum(Feature.cx8)] = "Support CMPXCHG8B instructions";
    result[@intFromEnum(Feature.egpr)] = "Support extended general purpose register";
    result[@intFromEnum(Feature.enqcmd)] = "Has ENQCMD instructions";
    result[@intFromEnum(Feature.ermsb)] = "REP MOVS/STOS are fast";
    result[@intFromEnum(Feature.evex512)] = "Support ZMM and 64-bit mask instructions";
    result[@intFromEnum(Feature.f16c)] = "Support 16-bit floating point conversion instructions";
    result[@intFromEnum(Feature.false_deps_getmant)] = "VGETMANTSS/SD/SH and VGETMANDPS/PD(memory version) has a false dependency on dest register";
    result[@intFromEnum(Feature.false_deps_lzcnt_tzcnt)] = "LZCNT/TZCNT have a false dependency on dest register";
    result[@intFromEnum(Feature.false_deps_mulc)] = "VF[C]MULCPH/SH has a false dependency on dest register";
    result[@intFromEnum(Feature.false_deps_mullq)] = "VPMULLQ has a false dependency on dest register";
    result[@intFromEnum(Feature.false_deps_perm)] = "VPERMD/Q/PS/PD has a false dependency on dest register";
    result[@intFromEnum(Feature.false_deps_popcnt)] = "POPCNT has a false dependency on dest register";
    result[@intFromEnum(Feature.false_deps_range)] = "VRANGEPD/PS/SD/SS has a false dependency on dest register";
    result[@intFromEnum(Feature.fast_11bytenop)] = "Target can quickly decode up to 11 byte NOPs";
    result[@intFromEnum(Feature.fast_15bytenop)] = "Target can quickly decode up to 15 byte NOPs";
    result[@intFromEnum(Feature.fast_7bytenop)] = "Target can quickly decode up to 7 byte NOPs";
    result[@intFromEnum(Feature.fast_bextr)] = "Indicates that the BEXTR instruction is implemented as a single uop with good throughput";
    result[@intFromEnum(Feature.fast_gather)] = "Indicates if gather is reasonably fast (this is true for Skylake client and all AVX-512 CPUs)";
    result[@intFromEnum(Feature.fast_hops)] = "Prefer horizontal vector math instructions (haddp, phsub, etc.) over normal vector instructions with shuffles";
    result[@intFromEnum(Feature.fast_lzcnt)] = "LZCNT instructions are as fast as most simple integer ops";
    result[@intFromEnum(Feature.fast_movbe)] = "Prefer a movbe over a single-use load + bswap / single-use bswap + store";
    result[@intFromEnum(Feature.fast_scalar_fsqrt)] = "Scalar SQRT is fast (disable Newton-Raphson)";
    result[@intFromEnum(Feature.fast_scalar_shift_masks)] = "Prefer a left/right scalar logical shift pair over a shift+and pair";
    result[@intFromEnum(Feature.fast_shld_rotate)] = "SHLD can be used as a faster rotate";
    result[@intFromEnum(Feature.fast_variable_crosslane_shuffle)] = "Cross-lane shuffles with variable masks are fast";
    result[@intFromEnum(Feature.fast_variable_perlane_shuffle)] = "Per-lane shuffles with variable masks are fast";
    result[@intFromEnum(Feature.fast_vector_fsqrt)] = "Vector SQRT is fast (disable Newton-Raphson)";
    result[@intFromEnum(Feature.fast_vector_shift_masks)] = "Prefer a left/right vector logical shift pair over a shift+and pair";
    result[@intFromEnum(Feature.faster_shift_than_shuffle)] = "Shifts are faster (or as fast) as shuffle";
    result[@intFromEnum(Feature.fma)] = "Enable three-operand fused multiple-add";
    result[@intFromEnum(Feature.fma4)] = "Enable four-operand fused multiple-add";
    result[@intFromEnum(Feature.fsgsbase)] = "Support FS/GS Base instructions";
    result[@intFromEnum(Feature.fsrm)] = "REP MOVSB of short lengths is faster";
    result[@intFromEnum(Feature.fxsr)] = "Support fxsave/fxrestore instructions";
    result[@intFromEnum(Feature.gfni)] = "Enable Galois Field Arithmetic Instructions";
    result[@intFromEnum(Feature.harden_sls_ijmp)] = "Harden against straight line speculation across indirect JMP instructions.";
    result[@intFromEnum(Feature.harden_sls_ret)] = "Harden against straight line speculation across RET instructions.";
    result[@intFromEnum(Feature.hreset)] = "Has hreset instruction";
    result[@intFromEnum(Feature.idivl_to_divb)] = "Use 8-bit divide for positive values less than 256";
    result[@intFromEnum(Feature.idivq_to_divl)] = "Use 32-bit divide for positive values less than 2^32";
    result[@intFromEnum(Feature.invpcid)] = "Invalidate Process-Context Identifier";
    result[@intFromEnum(Feature.kl)] = "Support Key Locker kl Instructions";
    result[@intFromEnum(Feature.lea_sp)] = "Use LEA for adjusting the stack pointer (this is an optimization for Intel Atom processors)";
    result[@intFromEnum(Feature.lea_uses_ag)] = "LEA instruction needs inputs at AG stage";
    result[@intFromEnum(Feature.lvi_cfi)] = "Prevent indirect calls/branches from using a memory operand, and precede all indirect calls/branches from a register with an LFENCE instruction to serialize control flow. Also decompose RET instructions into a POP+LFENCE+JMP sequence.";
    result[@intFromEnum(Feature.lvi_load_hardening)] = "Insert LFENCE instructions to prevent data speculatively injected into loads from being used maliciously.";
    result[@intFromEnum(Feature.lwp)] = "Enable LWP instructions";
    result[@intFromEnum(Feature.lzcnt)] = "Support LZCNT instruction";
    result[@intFromEnum(Feature.macrofusion)] = "Various instructions can be fused with conditional branches";
    result[@intFromEnum(Feature.mmx)] = "Enable MMX instructions";
    result[@intFromEnum(Feature.movbe)] = "Support MOVBE instruction";
    result[@intFromEnum(Feature.movdir64b)] = "Support movdir64b instruction (direct store 64 bytes)";
    result[@intFromEnum(Feature.movdiri)] = "Support movdiri instruction (direct store integer)";
    result[@intFromEnum(Feature.mwaitx)] = "Enable MONITORX/MWAITX timer functionality";
    result[@intFromEnum(Feature.ndd)] = "Support non-destructive destination";
    result[@intFromEnum(Feature.no_bypass_delay)] = "Has no bypass delay when using the 'wrong' domain";
    result[@intFromEnum(Feature.no_bypass_delay_blend)] = "Has no bypass delay when using the 'wrong' blend type";
    result[@intFromEnum(Feature.no_bypass_delay_mov)] = "Has no bypass delay when using the 'wrong' mov type";
    result[@intFromEnum(Feature.no_bypass_delay_shuffle)] = "Has no bypass delay when using the 'wrong' shuffle type";
    result[@intFromEnum(Feature.nopl)] = "Enable NOPL instruction (generally pentium pro+)";
    result[@intFromEnum(Feature.pad_short_functions)] = "Pad short functions (to prevent a stall when returning too early)";
    result[@intFromEnum(Feature.pclmul)] = "Enable packed carry-less multiplication instructions";
    result[@intFromEnum(Feature.pconfig)] = "platform configuration instruction";
    result[@intFromEnum(Feature.pku)] = "Enable protection keys";
    result[@intFromEnum(Feature.popcnt)] = "Support POPCNT instruction";
    result[@intFromEnum(Feature.ppx)] = "Support Push-Pop Acceleration";
    result[@intFromEnum(Feature.prefer_128_bit)] = "Prefer 128-bit AVX instructions";
    result[@intFromEnum(Feature.prefer_256_bit)] = "Prefer 256-bit AVX instructions";
    result[@intFromEnum(Feature.prefer_mask_registers)] = "Prefer AVX512 mask registers over PTEST/MOVMSK";
    result[@intFromEnum(Feature.prefer_movmsk_over_vtest)] = "Prefer movmsk over vtest instruction";
    result[@intFromEnum(Feature.prefer_no_gather)] = "Prefer no gather instructions";
    result[@intFromEnum(Feature.prefer_no_scatter)] = "Prefer no scatter instructions";
    result[@intFromEnum(Feature.prefetchi)] = "Prefetch instruction with T0 or T1 Hint";
    result[@intFromEnum(Feature.prefetchwt1)] = "Prefetch with Intent to Write and T1 Hint";
    result[@intFromEnum(Feature.prfchw)] = "Support PRFCHW instructions";
    result[@intFromEnum(Feature.ptwrite)] = "Support ptwrite instruction";
    result[@intFromEnum(Feature.push2pop2)] = "Support PUSH2/POP2 instructions";
    result[@intFromEnum(Feature.raoint)] = "Support RAO-INT instructions";
    result[@intFromEnum(Feature.rdpid)] = "Support RDPID instructions";
    result[@intFromEnum(Feature.rdpru)] = "Support RDPRU instructions";
    result[@intFromEnum(Feature.rdrnd)] = "Support RDRAND instruction";
    result[@intFromEnum(Feature.rdseed)] = "Support RDSEED instruction";
    result[@intFromEnum(Feature.retpoline)] = "Remove speculation of indirect branches from the generated code, either by avoiding them entirely or lowering them with a speculation blocking construct";
    result[@intFromEnum(Feature.retpoline_external_thunk)] = "When lowering an indirect call or branch using a `retpoline`, rely on the specified user provided thunk rather than emitting one ourselves. Only has effect when combined with some other retpoline feature";
    result[@intFromEnum(Feature.retpoline_indirect_branches)] = "Remove speculation of indirect branches from the generated code";
    result[@intFromEnum(Feature.retpoline_indirect_calls)] = "Remove speculation of indirect calls from the generated code";
    result[@intFromEnum(Feature.rtm)] = "Support RTM instructions";
    result[@intFromEnum(Feature.sahf)] = "Support LAHF and SAHF instructions in 64-bit mode";
    result[@intFromEnum(Feature.sbb_dep_breaking)] = "SBB with same register has no source dependency";
    result[@intFromEnum(Feature.serialize)] = "Has serialize instruction";
    result[@intFromEnum(Feature.seses)] = "Prevent speculative execution side channel timing attacks by inserting a speculation barrier before memory reads, memory writes, and conditional branches. Implies LVI Control Flow integrity.";
    result[@intFromEnum(Feature.sgx)] = "Enable Software Guard Extensions";
    result[@intFromEnum(Feature.sha)] = "Enable SHA instructions";
    result[@intFromEnum(Feature.sha512)] = "Support SHA512 instructions";
    result[@intFromEnum(Feature.shstk)] = "Support CET Shadow-Stack instructions";
    result[@intFromEnum(Feature.slow_3ops_lea)] = "LEA instruction with 3 ops or certain registers is slow";
    result[@intFromEnum(Feature.slow_incdec)] = "INC and DEC instructions are slower than ADD and SUB";
    result[@intFromEnum(Feature.slow_lea)] = "LEA instruction with certain arguments is slow";
    result[@intFromEnum(Feature.slow_pmaddwd)] = "PMADDWD is slower than PMULLD";
    result[@intFromEnum(Feature.slow_pmulld)] = "PMULLD instruction is slow (compared to PMULLW/PMULHW and PMULUDQ)";
    result[@intFromEnum(Feature.slow_shld)] = "SHLD instruction is slow";
    result[@intFromEnum(Feature.slow_two_mem_ops)] = "Two memory operand instructions are slow";
    result[@intFromEnum(Feature.slow_unaligned_mem_16)] = "Slow unaligned 16-byte memory access";
    result[@intFromEnum(Feature.slow_unaligned_mem_32)] = "Slow unaligned 32-byte memory access";
    result[@intFromEnum(Feature.sm3)] = "Support SM3 instructions";
    result[@intFromEnum(Feature.sm4)] = "Support SM4 instructions";
    result[@intFromEnum(Feature.soft_float)] = "Use software floating point features";
    result[@intFromEnum(Feature.sse)] = "Enable SSE instructions";
    result[@intFromEnum(Feature.sse2)] = "Enable SSE2 instructions";
    result[@intFromEnum(Feature.sse3)] = "Enable SSE3 instructions";
    result[@intFromEnum(Feature.sse4_1)] = "Enable SSE 4.1 instructions";
    result[@intFromEnum(Feature.sse4_2)] = "Enable SSE 4.2 instructions";
    result[@intFromEnum(Feature.sse4a)] = "Support SSE 4a instructions";
    result[@intFromEnum(Feature.sse_unaligned_mem)] = "Allow unaligned memory operands with SSE instructions (this may require setting a configuration bit in the processor)";
    result[@intFromEnum(Feature.ssse3)] = "Enable SSSE3 instructions";
    result[@intFromEnum(Feature.tagged_globals)] = "Use an instruction sequence for taking the address of a global that allows a memory tag in the upper address bits.";
    result[@intFromEnum(Feature.tbm)] = "Enable TBM instructions";
    result[@intFromEnum(Feature.tsxldtrk)] = "Support TSXLDTRK instructions";
    result[@intFromEnum(Feature.tuning_fast_imm_vector_shift)] = "Vector shifts are fast (2/cycle) as opposed to slow (1/cycle)";
    result[@intFromEnum(Feature.uintr)] = "Has UINTR Instructions";
    result[@intFromEnum(Feature.use_glm_div_sqrt_costs)] = "Use Goldmont specific floating point div/sqrt costs";
    result[@intFromEnum(Feature.use_slm_arith_costs)] = "Use Silvermont specific arithmetic costs";
    result[@intFromEnum(Feature.usermsr)] = "Support USERMSR instructions";
    result[@intFromEnum(Feature.vaes)] = "Promote selected AES instructions to AVX512/AVX registers";
    result[@intFromEnum(Feature.vpclmulqdq)] = "Enable vpclmulqdq instructions";
    result[@intFromEnum(Feature.vzeroupper)] = "Should insert vzeroupper instructions";
    result[@intFromEnum(Feature.waitpkg)] = "Wait and pause enhancements";
    result[@intFromEnum(Feature.wbnoinvd)] = "Write Back No Invalidate";
    result[@intFromEnum(Feature.widekl)] = "Support Key Locker wide Instructions";
    result[@intFromEnum(Feature.x87)] = "Enable X87 float instructions";
    result[@intFromEnum(Feature.xop)] = "Enable XOP instructions";
    result[@intFromEnum(Feature.xsave)] = "Support xsave instructions";
    result[@intFromEnum(Feature.xsavec)] = "Support xsavec instructions";
    result[@intFromEnum(Feature.xsaveopt)] = "Support xsaveopt instructions";
    result[@intFromEnum(Feature.xsaves)] = "Support xsaves instructions";
    break :blk result;
};

pub const cpu = struct {
    pub const alderlake = CpuModel{
        .name = "alderlake",
        .llvm_name = "alderlake",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avxvnni,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .false_deps_perm,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fxsr,
            .gfni,
            .hreset,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_movmsk_over_vtest,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .shstk,
            .slow_3ops_lea,
            .tuning_fast_imm_vector_shift,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .widekl,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const amdfam10 = CpuModel{
        .name = "amdfam10",
        .llvm_name = "amdfam10",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .@"64bit",
            .cmov,
            .cx16,
            .fast_scalar_shift_masks,
            .fxsr,
            .lzcnt,
            .nopl,
            .popcnt,
            .prfchw,
            .sahf,
            .sbb_dep_breaking,
            .slow_shld,
            .sse4a,
            .vzeroupper,
            .x87,
        }),
    };
    pub const arrowlake = CpuModel{
        .name = "arrowlake",
        .llvm_name = "arrowlake",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avxifma,
            .avxneconvert,
            .avxvnni,
            .avxvnniint8,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .cmpccxadd,
            .crc32,
            .cx16,
            .enqcmd,
            .f16c,
            .false_deps_perm,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fxsr,
            .gfni,
            .hreset,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_movmsk_over_vtest,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .shstk,
            .slow_3ops_lea,
            .tuning_fast_imm_vector_shift,
            .uintr,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .widekl,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const arrowlake_s = CpuModel{
        .name = "arrowlake_s",
        .llvm_name = "arrowlake-s",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avxifma,
            .avxneconvert,
            .avxvnni,
            .avxvnniint16,
            .avxvnniint8,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .cmpccxadd,
            .crc32,
            .cx16,
            .enqcmd,
            .f16c,
            .false_deps_perm,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fxsr,
            .gfni,
            .hreset,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_movmsk_over_vtest,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .sha512,
            .shstk,
            .slow_3ops_lea,
            .sm3,
            .sm4,
            .tuning_fast_imm_vector_shift,
            .uintr,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .widekl,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const athlon = CpuModel{
        .name = "athlon",
        .llvm_name = "athlon",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .cmov,
            .cx8,
            .nopl,
            .slow_shld,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const athlon64 = CpuModel{
        .name = "athlon64",
        .llvm_name = "athlon64",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .@"64bit",
            .cmov,
            .cx8,
            .fast_scalar_shift_masks,
            .fxsr,
            .nopl,
            .sbb_dep_breaking,
            .slow_shld,
            .slow_unaligned_mem_16,
            .sse2,
            .vzeroupper,
            .x87,
        }),
    };
    pub const athlon64_sse3 = CpuModel{
        .name = "athlon64_sse3",
        .llvm_name = "athlon64-sse3",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .@"64bit",
            .cmov,
            .cx16,
            .fast_scalar_shift_masks,
            .fxsr,
            .nopl,
            .sbb_dep_breaking,
            .slow_shld,
            .slow_unaligned_mem_16,
            .sse3,
            .vzeroupper,
            .x87,
        }),
    };
    pub const athlon_4 = CpuModel{
        .name = "athlon_4",
        .llvm_name = "athlon-4",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .cmov,
            .cx8,
            .fxsr,
            .nopl,
            .slow_shld,
            .slow_unaligned_mem_16,
            .sse,
            .vzeroupper,
            .x87,
        }),
    };
    pub const athlon_fx = CpuModel{
        .name = "athlon_fx",
        .llvm_name = "athlon-fx",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .@"64bit",
            .cmov,
            .cx8,
            .fast_scalar_shift_masks,
            .fxsr,
            .nopl,
            .sbb_dep_breaking,
            .slow_shld,
            .slow_unaligned_mem_16,
            .sse2,
            .vzeroupper,
            .x87,
        }),
    };
    pub const athlon_mp = CpuModel{
        .name = "athlon_mp",
        .llvm_name = "athlon-mp",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .cmov,
            .cx8,
            .fxsr,
            .nopl,
            .slow_shld,
            .slow_unaligned_mem_16,
            .sse,
            .vzeroupper,
            .x87,
        }),
    };
    pub const athlon_tbird = CpuModel{
        .name = "athlon_tbird",
        .llvm_name = "athlon-tbird",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .cmov,
            .cx8,
            .nopl,
            .slow_shld,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const athlon_xp = CpuModel{
        .name = "athlon_xp",
        .llvm_name = "athlon-xp",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .cmov,
            .cx8,
            .fxsr,
            .nopl,
            .slow_shld,
            .slow_unaligned_mem_16,
            .sse,
            .vzeroupper,
            .x87,
        }),
    };
    pub const atom = CpuModel{
        .name = "atom",
        .llvm_name = "atom",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .cx16,
            .fxsr,
            .idivl_to_divb,
            .idivq_to_divl,
            .lea_sp,
            .lea_uses_ag,
            .mmx,
            .movbe,
            .no_bypass_delay,
            .nopl,
            .pad_short_functions,
            .sahf,
            .slow_two_mem_ops,
            .slow_unaligned_mem_16,
            .ssse3,
            .vzeroupper,
            .x87,
        }),
    };
    pub const atom_sse4_2_movbe = CpuModel{
        .name = "atom_sse4_2_movbe",
        .llvm_name = "atom_sse4_2_movbe",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .aes,
            .clflushopt,
            .cmov,
            .crc32,
            .cx16,
            .false_deps_popcnt,
            .fast_7bytenop,
            .fast_movbe,
            .fsgsbase,
            .fxsr,
            .idivq_to_divl,
            .mmx,
            .movbe,
            .no_bypass_delay,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .rdrnd,
            .rdseed,
            .sahf,
            .sha,
            .slow_incdec,
            .slow_lea,
            .slow_pmulld,
            .slow_two_mem_ops,
            .sse4_2,
            .use_slm_arith_costs,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const barcelona = CpuModel{
        .name = "barcelona",
        .llvm_name = "barcelona",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .@"64bit",
            .cmov,
            .cx16,
            .fast_scalar_shift_masks,
            .fxsr,
            .lzcnt,
            .nopl,
            .popcnt,
            .prfchw,
            .sahf,
            .sbb_dep_breaking,
            .slow_shld,
            .sse4a,
            .vzeroupper,
            .x87,
        }),
    };
    pub const bdver1 = CpuModel{
        .name = "bdver1",
        .llvm_name = "bdver1",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .aes,
            .branchfusion,
            .cmov,
            .crc32,
            .cx16,
            .fast_11bytenop,
            .fast_scalar_shift_masks,
            .fxsr,
            .lwp,
            .lzcnt,
            .mmx,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .sahf,
            .sbb_dep_breaking,
            .slow_shld,
            .vzeroupper,
            .x87,
            .xop,
            .xsave,
        }),
    };
    pub const bdver2 = CpuModel{
        .name = "bdver2",
        .llvm_name = "bdver2",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .aes,
            .bmi,
            .branchfusion,
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .fast_11bytenop,
            .fast_bextr,
            .fast_movbe,
            .fast_scalar_shift_masks,
            .fma,
            .fxsr,
            .lwp,
            .lzcnt,
            .mmx,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .sahf,
            .sbb_dep_breaking,
            .slow_shld,
            .tbm,
            .vzeroupper,
            .x87,
            .xop,
            .xsave,
        }),
    };
    pub const bdver3 = CpuModel{
        .name = "bdver3",
        .llvm_name = "bdver3",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .aes,
            .bmi,
            .branchfusion,
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .fast_11bytenop,
            .fast_bextr,
            .fast_movbe,
            .fast_scalar_shift_masks,
            .fma,
            .fsgsbase,
            .fxsr,
            .lwp,
            .lzcnt,
            .mmx,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .sahf,
            .sbb_dep_breaking,
            .slow_shld,
            .tbm,
            .vzeroupper,
            .x87,
            .xop,
            .xsaveopt,
        }),
    };
    pub const bdver4 = CpuModel{
        .name = "bdver4",
        .llvm_name = "bdver4",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .aes,
            .avx2,
            .bmi,
            .bmi2,
            .branchfusion,
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .fast_11bytenop,
            .fast_bextr,
            .fast_movbe,
            .fast_scalar_shift_masks,
            .fma,
            .fsgsbase,
            .fxsr,
            .lwp,
            .lzcnt,
            .mmx,
            .movbe,
            .mwaitx,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .rdrnd,
            .sahf,
            .sbb_dep_breaking,
            .slow_shld,
            .tbm,
            .vzeroupper,
            .x87,
            .xop,
            .xsaveopt,
        }),
    };
    pub const bonnell = CpuModel{
        .name = "bonnell",
        .llvm_name = "bonnell",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .cx16,
            .fxsr,
            .idivl_to_divb,
            .idivq_to_divl,
            .lea_sp,
            .lea_uses_ag,
            .mmx,
            .movbe,
            .no_bypass_delay,
            .nopl,
            .pad_short_functions,
            .sahf,
            .slow_two_mem_ops,
            .slow_unaligned_mem_16,
            .ssse3,
            .vzeroupper,
            .x87,
        }),
    };
    pub const broadwell = CpuModel{
        .name = "broadwell",
        .llvm_name = "broadwell",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avx2,
            .bmi,
            .bmi2,
            .cmov,
            .crc32,
            .cx16,
            .ermsb,
            .f16c,
            .false_deps_lzcnt_tzcnt,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fma,
            .fsgsbase,
            .fxsr,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .rdrnd,
            .rdseed,
            .sahf,
            .slow_3ops_lea,
            .vzeroupper,
            .x87,
            .xsaveopt,
        }),
    };
    pub const btver1 = CpuModel{
        .name = "btver1",
        .llvm_name = "btver1",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .cx16,
            .fast_15bytenop,
            .fast_scalar_shift_masks,
            .fast_vector_shift_masks,
            .fxsr,
            .lzcnt,
            .mmx,
            .nopl,
            .popcnt,
            .prfchw,
            .sahf,
            .sbb_dep_breaking,
            .slow_shld,
            .sse4a,
            .ssse3,
            .vzeroupper,
            .x87,
        }),
    };
    pub const btver2 = CpuModel{
        .name = "btver2",
        .llvm_name = "btver2",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .aes,
            .bmi,
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .fast_15bytenop,
            .fast_bextr,
            .fast_hops,
            .fast_lzcnt,
            .fast_movbe,
            .fast_scalar_shift_masks,
            .fast_vector_shift_masks,
            .fxsr,
            .lzcnt,
            .mmx,
            .movbe,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .sahf,
            .sbb_dep_breaking,
            .slow_shld,
            .sse4a,
            .x87,
            .xsaveopt,
        }),
    };
    pub const c3 = CpuModel{
        .name = "c3",
        .llvm_name = "c3",
        .features = featureSet(&[_]Feature{
            .@"3dnow",
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const c3_2 = CpuModel{
        .name = "c3_2",
        .llvm_name = "c3-2",
        .features = featureSet(&[_]Feature{
            .cmov,
            .cx8,
            .fxsr,
            .mmx,
            .slow_unaligned_mem_16,
            .sse,
            .vzeroupper,
            .x87,
        }),
    };
    pub const cannonlake = CpuModel{
        .name = "cannonlake",
        .llvm_name = "cannonlake",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .aes,
            .allow_light_256_bit,
            .avx512cd,
            .avx512dq,
            .avx512ifma,
            .avx512vbmi,
            .avx512vl,
            .bmi,
            .bmi2,
            .clflushopt,
            .cmov,
            .crc32,
            .cx16,
            .ermsb,
            .evex512,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fsgsbase,
            .fxsr,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pclmul,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prfchw,
            .rdrnd,
            .rdseed,
            .sahf,
            .sha,
            .slow_3ops_lea,
            .tuning_fast_imm_vector_shift,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const cascadelake = CpuModel{
        .name = "cascadelake",
        .llvm_name = "cascadelake",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .aes,
            .allow_light_256_bit,
            .avx512bw,
            .avx512cd,
            .avx512dq,
            .avx512vl,
            .avx512vnni,
            .bmi,
            .bmi2,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .ermsb,
            .evex512,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .faster_shift_than_shuffle,
            .fsgsbase,
            .fxsr,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pclmul,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prfchw,
            .rdrnd,
            .rdseed,
            .sahf,
            .slow_3ops_lea,
            .tuning_fast_imm_vector_shift,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const clearwaterforest = CpuModel{
        .name = "clearwaterforest",
        .llvm_name = "clearwaterforest",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avxifma,
            .avxneconvert,
            .avxvnni,
            .avxvnniint16,
            .avxvnniint8,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .cmpccxadd,
            .crc32,
            .cx16,
            .enqcmd,
            .f16c,
            .false_deps_perm,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fxsr,
            .gfni,
            .hreset,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_movmsk_over_vtest,
            .prefetchi,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .sha512,
            .shstk,
            .slow_3ops_lea,
            .sm3,
            .sm4,
            .tuning_fast_imm_vector_shift,
            .uintr,
            .usermsr,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .widekl,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const cooperlake = CpuModel{
        .name = "cooperlake",
        .llvm_name = "cooperlake",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .aes,
            .allow_light_256_bit,
            .avx512bf16,
            .avx512cd,
            .avx512dq,
            .avx512vl,
            .avx512vnni,
            .bmi,
            .bmi2,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .ermsb,
            .evex512,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .faster_shift_than_shuffle,
            .fsgsbase,
            .fxsr,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pclmul,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prfchw,
            .rdrnd,
            .rdseed,
            .sahf,
            .slow_3ops_lea,
            .tuning_fast_imm_vector_shift,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const core2 = CpuModel{
        .name = "core2",
        .llvm_name = "core2",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .cx16,
            .fxsr,
            .macrofusion,
            .mmx,
            .nopl,
            .sahf,
            .slow_unaligned_mem_16,
            .ssse3,
            .vzeroupper,
            .x87,
        }),
    };
    pub const corei7 = CpuModel{
        .name = "corei7",
        .llvm_name = "corei7",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .crc32,
            .cx16,
            .fxsr,
            .macrofusion,
            .mmx,
            .no_bypass_delay_mov,
            .nopl,
            .popcnt,
            .sahf,
            .sse4_2,
            .vzeroupper,
            .x87,
        }),
    };
    pub const emeraldrapids = CpuModel{
        .name = "emeraldrapids",
        .llvm_name = "emeraldrapids",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .amx_bf16,
            .amx_int8,
            .avx512bf16,
            .avx512bitalg,
            .avx512cd,
            .avx512fp16,
            .avx512ifma,
            .avx512vbmi,
            .avx512vbmi2,
            .avx512vnni,
            .avx512vpopcntdq,
            .avxvnni,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .enqcmd,
            .ermsb,
            .evex512,
            .false_deps_getmant,
            .false_deps_mulc,
            .false_deps_mullq,
            .false_deps_perm,
            .false_deps_range,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fsgsbase,
            .fsrm,
            .fxsr,
            .gfni,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .shstk,
            .tsxldtrk,
            .tuning_fast_imm_vector_shift,
            .uintr,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .wbnoinvd,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const generic = CpuModel{
        .name = "generic",
        .llvm_name = "generic",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cx8,
            .fast_15bytenop,
            .fast_scalar_fsqrt,
            .idivq_to_divl,
            .macrofusion,
            .slow_3ops_lea,
            .vzeroupper,
            .x87,
        }),
    };
    pub const geode = CpuModel{
        .name = "geode",
        .llvm_name = "geode",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .cx8,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const goldmont = CpuModel{
        .name = "goldmont",
        .llvm_name = "goldmont",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .aes,
            .clflushopt,
            .cmov,
            .crc32,
            .cx16,
            .false_deps_popcnt,
            .fast_movbe,
            .fsgsbase,
            .fxsr,
            .mmx,
            .movbe,
            .no_bypass_delay,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .rdrnd,
            .rdseed,
            .sahf,
            .sha,
            .slow_incdec,
            .slow_lea,
            .slow_two_mem_ops,
            .sse4_2,
            .use_glm_div_sqrt_costs,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const goldmont_plus = CpuModel{
        .name = "goldmont_plus",
        .llvm_name = "goldmont-plus",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .aes,
            .clflushopt,
            .cmov,
            .crc32,
            .cx16,
            .fast_movbe,
            .fsgsbase,
            .fxsr,
            .mmx,
            .movbe,
            .no_bypass_delay,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .sha,
            .slow_incdec,
            .slow_lea,
            .slow_two_mem_ops,
            .sse4_2,
            .use_glm_div_sqrt_costs,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const gracemont = CpuModel{
        .name = "gracemont",
        .llvm_name = "gracemont",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .avxvnni,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_scalar_fsqrt,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fxsr,
            .gfni,
            .hreset,
            .idivl_to_divb,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .shstk,
            .slow_3ops_lea,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .widekl,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const grandridge = CpuModel{
        .name = "grandridge",
        .llvm_name = "grandridge",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .avxifma,
            .avxneconvert,
            .avxvnni,
            .avxvnniint8,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .cmpccxadd,
            .crc32,
            .cx16,
            .enqcmd,
            .f16c,
            .fast_movbe,
            .fma,
            .fsgsbase,
            .fxsr,
            .gfni,
            .hreset,
            .invpcid,
            .lzcnt,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .shstk,
            .slow_incdec,
            .slow_lea,
            .slow_two_mem_ops,
            .uintr,
            .use_glm_div_sqrt_costs,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .widekl,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const graniterapids = CpuModel{
        .name = "graniterapids",
        .llvm_name = "graniterapids",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .amx_bf16,
            .amx_fp16,
            .amx_int8,
            .avx512bf16,
            .avx512bitalg,
            .avx512cd,
            .avx512fp16,
            .avx512ifma,
            .avx512vbmi,
            .avx512vbmi2,
            .avx512vnni,
            .avx512vpopcntdq,
            .avxvnni,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .enqcmd,
            .ermsb,
            .evex512,
            .false_deps_getmant,
            .false_deps_mulc,
            .false_deps_mullq,
            .false_deps_perm,
            .false_deps_range,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fsgsbase,
            .fsrm,
            .fxsr,
            .gfni,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prefetchi,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .shstk,
            .tsxldtrk,
            .tuning_fast_imm_vector_shift,
            .uintr,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .wbnoinvd,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const graniterapids_d = CpuModel{
        .name = "graniterapids_d",
        .llvm_name = "graniterapids-d",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .amx_bf16,
            .amx_complex,
            .amx_fp16,
            .amx_int8,
            .avx512bf16,
            .avx512bitalg,
            .avx512cd,
            .avx512fp16,
            .avx512ifma,
            .avx512vbmi,
            .avx512vbmi2,
            .avx512vnni,
            .avx512vpopcntdq,
            .avxvnni,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .enqcmd,
            .ermsb,
            .evex512,
            .false_deps_getmant,
            .false_deps_mulc,
            .false_deps_mullq,
            .false_deps_perm,
            .false_deps_range,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fsgsbase,
            .fsrm,
            .fxsr,
            .gfni,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prefetchi,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .shstk,
            .tsxldtrk,
            .tuning_fast_imm_vector_shift,
            .uintr,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .wbnoinvd,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const haswell = CpuModel{
        .name = "haswell",
        .llvm_name = "haswell",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .allow_light_256_bit,
            .avx2,
            .bmi,
            .bmi2,
            .cmov,
            .crc32,
            .cx16,
            .ermsb,
            .f16c,
            .false_deps_lzcnt_tzcnt,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fma,
            .fsgsbase,
            .fxsr,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pclmul,
            .popcnt,
            .rdrnd,
            .sahf,
            .slow_3ops_lea,
            .vzeroupper,
            .x87,
            .xsaveopt,
        }),
    };
    pub const @"i386" = CpuModel{
        .name = "i386",
        .llvm_name = "i386",
        .features = featureSet(&[_]Feature{
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const @"i486" = CpuModel{
        .name = "i486",
        .llvm_name = "i486",
        .features = featureSet(&[_]Feature{
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const @"i586" = CpuModel{
        .name = "i586",
        .llvm_name = "i586",
        .features = featureSet(&[_]Feature{
            .cx8,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const @"i686" = CpuModel{
        .name = "i686",
        .llvm_name = "i686",
        .features = featureSet(&[_]Feature{
            .cmov,
            .cx8,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const icelake_client = CpuModel{
        .name = "icelake_client",
        .llvm_name = "icelake-client",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avx512bitalg,
            .avx512cd,
            .avx512dq,
            .avx512ifma,
            .avx512vbmi,
            .avx512vbmi2,
            .avx512vl,
            .avx512vnni,
            .avx512vpopcntdq,
            .bmi,
            .bmi2,
            .clflushopt,
            .cmov,
            .crc32,
            .cx16,
            .ermsb,
            .evex512,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fsgsbase,
            .fsrm,
            .fxsr,
            .gfni,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prfchw,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .sha,
            .tuning_fast_imm_vector_shift,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const icelake_server = CpuModel{
        .name = "icelake_server",
        .llvm_name = "icelake-server",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avx512bitalg,
            .avx512cd,
            .avx512dq,
            .avx512ifma,
            .avx512vbmi,
            .avx512vbmi2,
            .avx512vl,
            .avx512vnni,
            .avx512vpopcntdq,
            .bmi,
            .bmi2,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .ermsb,
            .evex512,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fsgsbase,
            .fsrm,
            .fxsr,
            .gfni,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prfchw,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .sha,
            .tuning_fast_imm_vector_shift,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .wbnoinvd,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const ivybridge = CpuModel{
        .name = "ivybridge",
        .llvm_name = "ivybridge",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fsgsbase,
            .fxsr,
            .idivq_to_divl,
            .macrofusion,
            .mmx,
            .no_bypass_delay_mov,
            .nopl,
            .pclmul,
            .popcnt,
            .rdrnd,
            .sahf,
            .slow_3ops_lea,
            .slow_unaligned_mem_32,
            .vzeroupper,
            .x87,
            .xsaveopt,
        }),
    };
    pub const k6 = CpuModel{
        .name = "k6",
        .llvm_name = "k6",
        .features = featureSet(&[_]Feature{
            .cx8,
            .mmx,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const k6_2 = CpuModel{
        .name = "k6_2",
        .llvm_name = "k6-2",
        .features = featureSet(&[_]Feature{
            .@"3dnow",
            .cx8,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const k6_3 = CpuModel{
        .name = "k6_3",
        .llvm_name = "k6-3",
        .features = featureSet(&[_]Feature{
            .@"3dnow",
            .cx8,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const k8 = CpuModel{
        .name = "k8",
        .llvm_name = "k8",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .@"64bit",
            .cmov,
            .cx8,
            .fast_scalar_shift_masks,
            .fxsr,
            .nopl,
            .sbb_dep_breaking,
            .slow_shld,
            .slow_unaligned_mem_16,
            .sse2,
            .vzeroupper,
            .x87,
        }),
    };
    pub const k8_sse3 = CpuModel{
        .name = "k8_sse3",
        .llvm_name = "k8-sse3",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .@"64bit",
            .cmov,
            .cx16,
            .fast_scalar_shift_masks,
            .fxsr,
            .nopl,
            .sbb_dep_breaking,
            .slow_shld,
            .slow_unaligned_mem_16,
            .sse3,
            .vzeroupper,
            .x87,
        }),
    };
    pub const knl = CpuModel{
        .name = "knl",
        .llvm_name = "knl",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .aes,
            .avx512cd,
            .avx512er,
            .avx512pf,
            .bmi,
            .bmi2,
            .cmov,
            .crc32,
            .cx16,
            .evex512,
            .fast_gather,
            .fast_movbe,
            .fsgsbase,
            .fxsr,
            .idivq_to_divl,
            .lzcnt,
            .mmx,
            .movbe,
            .nopl,
            .pclmul,
            .popcnt,
            .prefer_mask_registers,
            .prefetchwt1,
            .prfchw,
            .rdrnd,
            .rdseed,
            .sahf,
            .slow_3ops_lea,
            .slow_incdec,
            .slow_pmaddwd,
            .slow_two_mem_ops,
            .x87,
            .xsaveopt,
        }),
    };
    pub const knm = CpuModel{
        .name = "knm",
        .llvm_name = "knm",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .aes,
            .avx512cd,
            .avx512er,
            .avx512pf,
            .avx512vpopcntdq,
            .bmi,
            .bmi2,
            .cmov,
            .crc32,
            .cx16,
            .evex512,
            .fast_gather,
            .fast_movbe,
            .fsgsbase,
            .fxsr,
            .idivq_to_divl,
            .lzcnt,
            .mmx,
            .movbe,
            .nopl,
            .pclmul,
            .popcnt,
            .prefer_mask_registers,
            .prefetchwt1,
            .prfchw,
            .rdrnd,
            .rdseed,
            .sahf,
            .slow_3ops_lea,
            .slow_incdec,
            .slow_pmaddwd,
            .slow_two_mem_ops,
            .x87,
            .xsaveopt,
        }),
    };
    pub const lakemont = CpuModel{
        .name = "lakemont",
        .llvm_name = "lakemont",
        .features = featureSet(&[_]Feature{
            .cx8,
            .slow_unaligned_mem_16,
            .soft_float,
            .vzeroupper,
        }),
    };
    pub const lunarlake = CpuModel{
        .name = "lunarlake",
        .llvm_name = "lunarlake",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avxifma,
            .avxneconvert,
            .avxvnni,
            .avxvnniint16,
            .avxvnniint8,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .cmpccxadd,
            .crc32,
            .cx16,
            .enqcmd,
            .f16c,
            .false_deps_perm,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fxsr,
            .gfni,
            .hreset,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_movmsk_over_vtest,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .sha512,
            .shstk,
            .slow_3ops_lea,
            .sm3,
            .sm4,
            .tuning_fast_imm_vector_shift,
            .uintr,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .widekl,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const meteorlake = CpuModel{
        .name = "meteorlake",
        .llvm_name = "meteorlake",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avxvnni,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .false_deps_perm,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fxsr,
            .gfni,
            .hreset,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_movmsk_over_vtest,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .shstk,
            .slow_3ops_lea,
            .tuning_fast_imm_vector_shift,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .widekl,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const nehalem = CpuModel{
        .name = "nehalem",
        .llvm_name = "nehalem",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .crc32,
            .cx16,
            .fxsr,
            .macrofusion,
            .mmx,
            .no_bypass_delay_mov,
            .nopl,
            .popcnt,
            .sahf,
            .sse4_2,
            .vzeroupper,
            .x87,
        }),
    };
    pub const nocona = CpuModel{
        .name = "nocona",
        .llvm_name = "nocona",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .cx16,
            .fxsr,
            .mmx,
            .nopl,
            .slow_unaligned_mem_16,
            .sse3,
            .vzeroupper,
            .x87,
        }),
    };
    pub const opteron = CpuModel{
        .name = "opteron",
        .llvm_name = "opteron",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .@"64bit",
            .cmov,
            .cx8,
            .fast_scalar_shift_masks,
            .fxsr,
            .nopl,
            .sbb_dep_breaking,
            .slow_shld,
            .slow_unaligned_mem_16,
            .sse2,
            .vzeroupper,
            .x87,
        }),
    };
    pub const opteron_sse3 = CpuModel{
        .name = "opteron_sse3",
        .llvm_name = "opteron-sse3",
        .features = featureSet(&[_]Feature{
            .@"3dnowa",
            .@"64bit",
            .cmov,
            .cx16,
            .fast_scalar_shift_masks,
            .fxsr,
            .nopl,
            .sbb_dep_breaking,
            .slow_shld,
            .slow_unaligned_mem_16,
            .sse3,
            .vzeroupper,
            .x87,
        }),
    };
    pub const pantherlake = CpuModel{
        .name = "pantherlake",
        .llvm_name = "pantherlake",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avxifma,
            .avxneconvert,
            .avxvnni,
            .avxvnniint16,
            .avxvnniint8,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .cmpccxadd,
            .crc32,
            .cx16,
            .enqcmd,
            .f16c,
            .false_deps_perm,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fxsr,
            .gfni,
            .hreset,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_movmsk_over_vtest,
            .prefetchi,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .sha512,
            .shstk,
            .slow_3ops_lea,
            .sm3,
            .sm4,
            .tuning_fast_imm_vector_shift,
            .uintr,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .widekl,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const penryn = CpuModel{
        .name = "penryn",
        .llvm_name = "penryn",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .cx16,
            .fxsr,
            .macrofusion,
            .mmx,
            .nopl,
            .sahf,
            .slow_unaligned_mem_16,
            .sse4_1,
            .vzeroupper,
            .x87,
        }),
    };
    pub const pentium = CpuModel{
        .name = "pentium",
        .llvm_name = "pentium",
        .features = featureSet(&[_]Feature{
            .cx8,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const pentium2 = CpuModel{
        .name = "pentium2",
        .llvm_name = "pentium2",
        .features = featureSet(&[_]Feature{
            .cmov,
            .cx8,
            .fxsr,
            .mmx,
            .nopl,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const pentium3 = CpuModel{
        .name = "pentium3",
        .llvm_name = "pentium3",
        .features = featureSet(&[_]Feature{
            .cmov,
            .cx8,
            .fxsr,
            .mmx,
            .nopl,
            .slow_unaligned_mem_16,
            .sse,
            .vzeroupper,
            .x87,
        }),
    };
    pub const pentium3m = CpuModel{
        .name = "pentium3m",
        .llvm_name = "pentium3m",
        .features = featureSet(&[_]Feature{
            .cmov,
            .cx8,
            .fxsr,
            .mmx,
            .nopl,
            .slow_unaligned_mem_16,
            .sse,
            .vzeroupper,
            .x87,
        }),
    };
    pub const pentium4 = CpuModel{
        .name = "pentium4",
        .llvm_name = "pentium4",
        .features = featureSet(&[_]Feature{
            .cmov,
            .cx8,
            .fxsr,
            .mmx,
            .nopl,
            .slow_unaligned_mem_16,
            .sse2,
            .vzeroupper,
            .x87,
        }),
    };
    pub const pentium_m = CpuModel{
        .name = "pentium_m",
        .llvm_name = "pentium-m",
        .features = featureSet(&[_]Feature{
            .cmov,
            .cx8,
            .fxsr,
            .mmx,
            .nopl,
            .slow_unaligned_mem_16,
            .sse2,
            .vzeroupper,
            .x87,
        }),
    };
    pub const pentium_mmx = CpuModel{
        .name = "pentium_mmx",
        .llvm_name = "pentium-mmx",
        .features = featureSet(&[_]Feature{
            .cx8,
            .mmx,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const pentiumpro = CpuModel{
        .name = "pentiumpro",
        .llvm_name = "pentiumpro",
        .features = featureSet(&[_]Feature{
            .cmov,
            .cx8,
            .nopl,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const prescott = CpuModel{
        .name = "prescott",
        .llvm_name = "prescott",
        .features = featureSet(&[_]Feature{
            .cmov,
            .cx8,
            .fxsr,
            .mmx,
            .nopl,
            .slow_unaligned_mem_16,
            .sse3,
            .vzeroupper,
            .x87,
        }),
    };
    pub const raptorlake = CpuModel{
        .name = "raptorlake",
        .llvm_name = "raptorlake",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avxvnni,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .false_deps_perm,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fxsr,
            .gfni,
            .hreset,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_movmsk_over_vtest,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .shstk,
            .slow_3ops_lea,
            .tuning_fast_imm_vector_shift,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .widekl,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const rocketlake = CpuModel{
        .name = "rocketlake",
        .llvm_name = "rocketlake",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avx512bitalg,
            .avx512cd,
            .avx512dq,
            .avx512ifma,
            .avx512vbmi,
            .avx512vbmi2,
            .avx512vl,
            .avx512vnni,
            .avx512vpopcntdq,
            .bmi,
            .bmi2,
            .clflushopt,
            .cmov,
            .crc32,
            .cx16,
            .ermsb,
            .evex512,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fsgsbase,
            .fsrm,
            .fxsr,
            .gfni,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prfchw,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .sha,
            .tuning_fast_imm_vector_shift,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const sandybridge = CpuModel{
        .name = "sandybridge",
        .llvm_name = "sandybridge",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .avx,
            .cmov,
            .crc32,
            .cx16,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fxsr,
            .idivq_to_divl,
            .macrofusion,
            .mmx,
            .no_bypass_delay_mov,
            .nopl,
            .pclmul,
            .popcnt,
            .sahf,
            .slow_3ops_lea,
            .slow_unaligned_mem_32,
            .vzeroupper,
            .x87,
            .xsaveopt,
        }),
    };
    pub const sapphirerapids = CpuModel{
        .name = "sapphirerapids",
        .llvm_name = "sapphirerapids",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .amx_bf16,
            .amx_int8,
            .avx512bf16,
            .avx512bitalg,
            .avx512cd,
            .avx512fp16,
            .avx512ifma,
            .avx512vbmi,
            .avx512vbmi2,
            .avx512vnni,
            .avx512vpopcntdq,
            .avxvnni,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .enqcmd,
            .ermsb,
            .evex512,
            .false_deps_getmant,
            .false_deps_mulc,
            .false_deps_mullq,
            .false_deps_perm,
            .false_deps_range,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fsgsbase,
            .fsrm,
            .fxsr,
            .gfni,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .shstk,
            .tsxldtrk,
            .tuning_fast_imm_vector_shift,
            .uintr,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .wbnoinvd,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const sierraforest = CpuModel{
        .name = "sierraforest",
        .llvm_name = "sierraforest",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .avxifma,
            .avxneconvert,
            .avxvnni,
            .avxvnniint8,
            .bmi,
            .bmi2,
            .cldemote,
            .clflushopt,
            .clwb,
            .cmov,
            .cmpccxadd,
            .crc32,
            .cx16,
            .enqcmd,
            .f16c,
            .fast_movbe,
            .fma,
            .fsgsbase,
            .fxsr,
            .gfni,
            .hreset,
            .invpcid,
            .lzcnt,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay,
            .nopl,
            .pconfig,
            .pku,
            .popcnt,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .serialize,
            .sha,
            .shstk,
            .slow_incdec,
            .slow_lea,
            .slow_two_mem_ops,
            .uintr,
            .use_glm_div_sqrt_costs,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .waitpkg,
            .widekl,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const silvermont = CpuModel{
        .name = "silvermont",
        .llvm_name = "silvermont",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .crc32,
            .cx16,
            .false_deps_popcnt,
            .fast_7bytenop,
            .fast_movbe,
            .fxsr,
            .idivq_to_divl,
            .mmx,
            .movbe,
            .no_bypass_delay,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .rdrnd,
            .sahf,
            .slow_incdec,
            .slow_lea,
            .slow_pmulld,
            .slow_two_mem_ops,
            .sse4_2,
            .use_slm_arith_costs,
            .vzeroupper,
            .x87,
        }),
    };
    pub const skx = CpuModel{
        .name = "skx",
        .llvm_name = "skx",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .aes,
            .allow_light_256_bit,
            .avx512bw,
            .avx512cd,
            .avx512dq,
            .avx512vl,
            .bmi,
            .bmi2,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .ermsb,
            .evex512,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .faster_shift_than_shuffle,
            .fsgsbase,
            .fxsr,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pclmul,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prfchw,
            .rdrnd,
            .rdseed,
            .sahf,
            .slow_3ops_lea,
            .tuning_fast_imm_vector_shift,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const skylake = CpuModel{
        .name = "skylake",
        .llvm_name = "skylake",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .aes,
            .allow_light_256_bit,
            .avx2,
            .bmi,
            .bmi2,
            .clflushopt,
            .cmov,
            .crc32,
            .cx16,
            .ermsb,
            .f16c,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fxsr,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .rdrnd,
            .rdseed,
            .sahf,
            .slow_3ops_lea,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const skylake_avx512 = CpuModel{
        .name = "skylake_avx512",
        .llvm_name = "skylake-avx512",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .aes,
            .allow_light_256_bit,
            .avx512bw,
            .avx512cd,
            .avx512dq,
            .avx512vl,
            .bmi,
            .bmi2,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .ermsb,
            .evex512,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .faster_shift_than_shuffle,
            .fsgsbase,
            .fxsr,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pclmul,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prfchw,
            .rdrnd,
            .rdseed,
            .sahf,
            .slow_3ops_lea,
            .tuning_fast_imm_vector_shift,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const slm = CpuModel{
        .name = "slm",
        .llvm_name = "slm",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .crc32,
            .cx16,
            .false_deps_popcnt,
            .fast_7bytenop,
            .fast_movbe,
            .fxsr,
            .idivq_to_divl,
            .mmx,
            .movbe,
            .no_bypass_delay,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .rdrnd,
            .sahf,
            .slow_incdec,
            .slow_lea,
            .slow_pmulld,
            .slow_two_mem_ops,
            .sse4_2,
            .use_slm_arith_costs,
            .vzeroupper,
            .x87,
        }),
    };
    pub const tigerlake = CpuModel{
        .name = "tigerlake",
        .llvm_name = "tigerlake",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avx512bitalg,
            .avx512cd,
            .avx512dq,
            .avx512ifma,
            .avx512vbmi,
            .avx512vbmi2,
            .avx512vl,
            .avx512vnni,
            .avx512vp2intersect,
            .avx512vpopcntdq,
            .bmi,
            .bmi2,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .ermsb,
            .evex512,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fsgsbase,
            .fsrm,
            .fxsr,
            .gfni,
            .idivq_to_divl,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .movdir64b,
            .movdiri,
            .no_bypass_delay_blend,
            .no_bypass_delay_mov,
            .no_bypass_delay_shuffle,
            .nopl,
            .pku,
            .popcnt,
            .prefer_256_bit,
            .prfchw,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .sha,
            .shstk,
            .tuning_fast_imm_vector_shift,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const tremont = CpuModel{
        .name = "tremont",
        .llvm_name = "tremont",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .aes,
            .clflushopt,
            .clwb,
            .cmov,
            .crc32,
            .cx16,
            .fast_movbe,
            .fsgsbase,
            .fxsr,
            .gfni,
            .mmx,
            .movbe,
            .no_bypass_delay,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .ptwrite,
            .rdpid,
            .rdrnd,
            .rdseed,
            .sahf,
            .sha,
            .slow_incdec,
            .slow_lea,
            .slow_two_mem_ops,
            .sse4_2,
            .use_glm_div_sqrt_costs,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const westmere = CpuModel{
        .name = "westmere",
        .llvm_name = "westmere",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .crc32,
            .cx16,
            .fxsr,
            .macrofusion,
            .mmx,
            .no_bypass_delay_mov,
            .nopl,
            .pclmul,
            .popcnt,
            .sahf,
            .sse4_2,
            .vzeroupper,
            .x87,
        }),
    };
    pub const winchip2 = CpuModel{
        .name = "winchip2",
        .llvm_name = "winchip2",
        .features = featureSet(&[_]Feature{
            .@"3dnow",
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const winchip_c6 = CpuModel{
        .name = "winchip_c6",
        .llvm_name = "winchip-c6",
        .features = featureSet(&[_]Feature{
            .mmx,
            .slow_unaligned_mem_16,
            .vzeroupper,
            .x87,
        }),
    };
    pub const x86_64 = CpuModel{
        .name = "x86_64",
        .llvm_name = "x86-64",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .cx8,
            .fxsr,
            .idivq_to_divl,
            .macrofusion,
            .mmx,
            .nopl,
            .slow_3ops_lea,
            .slow_incdec,
            .sse2,
            .vzeroupper,
            .x87,
        }),
    };
    pub const x86_64_v2 = CpuModel{
        .name = "x86_64_v2",
        .llvm_name = "x86-64-v2",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .cmov,
            .crc32,
            .cx16,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fxsr,
            .idivq_to_divl,
            .macrofusion,
            .mmx,
            .nopl,
            .popcnt,
            .sahf,
            .slow_3ops_lea,
            .slow_unaligned_mem_32,
            .sse4_2,
            .vzeroupper,
            .x87,
        }),
    };
    pub const x86_64_v3 = CpuModel{
        .name = "x86_64_v3",
        .llvm_name = "x86-64-v3",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .allow_light_256_bit,
            .avx2,
            .bmi,
            .bmi2,
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .false_deps_lzcnt_tzcnt,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fma,
            .fxsr,
            .idivq_to_divl,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .nopl,
            .popcnt,
            .sahf,
            .slow_3ops_lea,
            .vzeroupper,
            .x87,
            .xsave,
        }),
    };
    pub const x86_64_v4 = CpuModel{
        .name = "x86_64_v4",
        .llvm_name = "x86-64-v4",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .allow_light_256_bit,
            .avx512bw,
            .avx512cd,
            .avx512dq,
            .avx512vl,
            .bmi,
            .bmi2,
            .cmov,
            .crc32,
            .cx16,
            .evex512,
            .false_deps_popcnt,
            .fast_15bytenop,
            .fast_gather,
            .fast_scalar_fsqrt,
            .fast_shld_rotate,
            .fast_variable_crosslane_shuffle,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fxsr,
            .idivq_to_divl,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .nopl,
            .popcnt,
            .prefer_256_bit,
            .sahf,
            .slow_3ops_lea,
            .vzeroupper,
            .x87,
            .xsave,
        }),
    };
    pub const yonah = CpuModel{
        .name = "yonah",
        .llvm_name = "yonah",
        .features = featureSet(&[_]Feature{
            .cmov,
            .cx8,
            .fxsr,
            .mmx,
            .nopl,
            .slow_unaligned_mem_16,
            .sse3,
            .vzeroupper,
            .x87,
        }),
    };
    pub const znver1 = CpuModel{
        .name = "znver1",
        .llvm_name = "znver1",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .aes,
            .allow_light_256_bit,
            .avx2,
            .bmi,
            .bmi2,
            .branchfusion,
            .clflushopt,
            .clzero,
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .fast_15bytenop,
            .fast_bextr,
            .fast_lzcnt,
            .fast_movbe,
            .fast_scalar_fsqrt,
            .fast_scalar_shift_masks,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fxsr,
            .lzcnt,
            .mmx,
            .movbe,
            .mwaitx,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .rdrnd,
            .rdseed,
            .sahf,
            .sbb_dep_breaking,
            .sha,
            .slow_shld,
            .sse4a,
            .vzeroupper,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const znver2 = CpuModel{
        .name = "znver2",
        .llvm_name = "znver2",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .aes,
            .allow_light_256_bit,
            .avx2,
            .bmi,
            .bmi2,
            .branchfusion,
            .clflushopt,
            .clwb,
            .clzero,
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .fast_15bytenop,
            .fast_bextr,
            .fast_lzcnt,
            .fast_movbe,
            .fast_scalar_fsqrt,
            .fast_scalar_shift_masks,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fxsr,
            .lzcnt,
            .mmx,
            .movbe,
            .mwaitx,
            .nopl,
            .pclmul,
            .popcnt,
            .prfchw,
            .rdpid,
            .rdpru,
            .rdrnd,
            .rdseed,
            .sahf,
            .sbb_dep_breaking,
            .sha,
            .slow_shld,
            .sse4a,
            .vzeroupper,
            .wbnoinvd,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const znver3 = CpuModel{
        .name = "znver3",
        .llvm_name = "znver3",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .bmi,
            .bmi2,
            .branchfusion,
            .clflushopt,
            .clwb,
            .clzero,
            .cmov,
            .crc32,
            .cx16,
            .f16c,
            .fast_15bytenop,
            .fast_bextr,
            .fast_lzcnt,
            .fast_movbe,
            .fast_scalar_fsqrt,
            .fast_scalar_shift_masks,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fma,
            .fsgsbase,
            .fsrm,
            .fxsr,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .mwaitx,
            .nopl,
            .pku,
            .popcnt,
            .prfchw,
            .rdpid,
            .rdpru,
            .rdrnd,
            .rdseed,
            .sahf,
            .sbb_dep_breaking,
            .sha,
            .slow_shld,
            .sse4a,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .wbnoinvd,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
    pub const znver4 = CpuModel{
        .name = "znver4",
        .llvm_name = "znver4",
        .features = featureSet(&[_]Feature{
            .@"64bit",
            .adx,
            .allow_light_256_bit,
            .avx512bf16,
            .avx512bitalg,
            .avx512cd,
            .avx512dq,
            .avx512ifma,
            .avx512vbmi,
            .avx512vbmi2,
            .avx512vl,
            .avx512vnni,
            .avx512vpopcntdq,
            .bmi,
            .bmi2,
            .branchfusion,
            .clflushopt,
            .clwb,
            .clzero,
            .cmov,
            .crc32,
            .cx16,
            .evex512,
            .fast_15bytenop,
            .fast_bextr,
            .fast_lzcnt,
            .fast_movbe,
            .fast_scalar_fsqrt,
            .fast_scalar_shift_masks,
            .fast_variable_perlane_shuffle,
            .fast_vector_fsqrt,
            .fsgsbase,
            .fsrm,
            .fxsr,
            .gfni,
            .invpcid,
            .lzcnt,
            .macrofusion,
            .mmx,
            .movbe,
            .mwaitx,
            .nopl,
            .pku,
            .popcnt,
            .prfchw,
            .rdpid,
            .rdpru,
            .rdrnd,
            .rdseed,
            .sahf,
            .sbb_dep_breaking,
            .sha,
            .shstk,
            .slow_shld,
            .sse4a,
            .vaes,
            .vpclmulqdq,
            .vzeroupper,
            .wbnoinvd,
            .x87,
            .xsavec,
            .xsaveopt,
            .xsaves,
        }),
    };
};
